---
date-modified: last-modified
number-sections: true
format: 
  html: 
    toc: true
code-link: true
code-copy: true
execute: 
  warning: false
  error: false
  freeze: auto
editor: visual
---

# 대용량 데이터와 클라우드 네이티브 {#sec-large}

이 장에서는 R을 사용하여 대용량 공간 및 시공간 데이터셋을 처리하는 방법을 설명하며, **sf**와 **stars** 패키지의 활용에 초점을 맞춘다. 여기서 대용량의 의미를 다음의 세가지로 분류하고자 한다.

-   작업 메모리에 맞추기 어려울 만큼 크다.

-   로컬 하드 드라이브에 맞추기 어려울 만큼 크다.

-   로컬 관리 인프라(네트워크 부착 스토리지)에 다운로드하기 어려울 만큼 크다.

이 세 가지 범주는 (현재) 대략적으로 기가바이트(Gigabyte), 테라바이트(Terabyte), 페타바이트(Petabyte) 크기의 데이터셋에 해당한다고 볼 수 있다. 크기 고려 사항 외에도 접근 및 처리 속도도 중요한 역할을 하며, 특히 초대용량 데이터셋이나 인터랙티브 애플리케이션의 경우 더욱 그렇다. 클라우드 네이티브 지리공간 포맷은 클라우드 인프라에서의 처리에 최적화된 포맷으로, 컴퓨팅 및 저장 비용의 측면에서 최적화될 필요가 있다.

다음과 같은 방식으로 비용을 절감할 수 있다.

-   압축. 클라우드-최적화 GeoTIFF에 사용되는 LERC(제한 오류 래스터 압축) 알고리즘이나 ZARR 어레이 데이터에 사용되는 BLOSC 압축기와 같은 압축 기술이다.

-   공간 하위 영역에 대한 빠른 접근 또는 컬럼-지향 데이터 접근. 전자는 클라우드-최적화 GeoTIFF에 대해 HTTP 래인지 리퀘스트를 통해 이루어지며, 후자는 GeoParquet 및 GeoArrow 포맷에 주로 적용된다.

-   점진적인 해상도로 데이터에 접근 및 보기(우선 저해상도 데이터를 제공하고, 이후 필요에 따라 해상도를 점진적으로 높여가는 방식). 점진적 JPEG 포맷이나 이미지 피라미드(또는 오버뷰) 같은 것이 실행 예시이다.

-   데이터 접근의 최적화. 해당 클라우드 스토리지의 구조와 동작 방식에 맞추거나 해당 객체 스토리지 프로토콜이 제공하는 기능을 활용하는 등의 방식을 통해 최적화를 수행한다.

이 분야에는 만능 해결책이 없다는 점에 유의해야 한다. 특정 접근 패턴에 맞춰 스토리지를 최적화하면 다른 방식으로의 접근 속도가 느려질 수 있다. 예를 들어, 래스터 데이터가 서로 다른 공간 해상도에서 공간 영역에 대한 최적 접근을 위해 저장되면, 픽셀 시계열로 데이터를 읽는 속도가 매우 느릴 수 있다. 압축은 스토리지 및 대역폭(전송) 비용을 낮추지만, 읽을 때는 압축 해제 과정이 필요하기 때문에 처리 비용이 증가한다.

## 벡터 데이터: `sf`

### 로컬 디스크로부터 불러오기

### 데이터베이스로부터 불러오기, dbplyr

### 온라인 리소스 혹은 웹 서비스로부터 불러오기

### API, OpenStreetMap

### GeoParquet와 GeoArrow

## 래스터 데이터: `stars`

### `stars` 프록시 객체

### 프록시 객체에 대한 오퍼레이션

### 원격 래스터 리소스

## 대용량 데이터 큐브

### 검색과 처리

### 클라우드 네이티브 스토리지: Zarr

### 데이터 API: GEE, openEO

## 연습문제
