---
date-modified: last-modified
number-sections: false
format: 
  html: 
    toc: true
code-link: true
code-copy: true
execute: 
  warning: false
  error: false
  freeze: auto
editor: visual
---

# 예전 R 공간 패키지 {#sec-package}

## rgdal과 rgeos 패키지의 퇴역

**sf**와 **stars**와 같은 최신 패키지가 등장하기 전부터 R을 사용해 온 오랜 사용자라면, **maptools**, **sp**, **rgeos**, **rgdal**과 같은 오래된 공간 패키지에 더 익숙할 것이다. 그렇다면, 기존 코드나 이들 패키지에 의존하는 다른 R 패키지를 갱신해야 할 필요가 있는지 궁금할 것이다. 그에 대한 대답은 간단하다. "그렇다."

**maptools**, **rgdal**, **rgeos** 패키지는 2023년에 퇴역했다. 여기서 '퇴역'이란 더 이상 유지 보수가 이뤄지지 않고, 그 결과로 CRAN에서 해당 패키지가 아카이브로 전환되는 것을 의미한다. 다만 R-Forge가 유지되는 한, 소스 코드 저장소 자체는 계속 남아 있을 것이다. 퇴역의 한 가지 이유는 관리자의 은퇴이며, 더 중요한 이유는 이들 패키지의 기능이 이미 새로운 패키지들로 대체되었기 때문이다. 새로운 관리자가 R-Forge 저장소를 인수할 가능성은 매우 낮다. 이는 GEOS, GDAL, PROJ 라이브러리의 발전과 함께 패키지 코드가 점진적으로 변화해 왔고, 많은 부분이 오래된 구조를 포함해 유지와 이해가 어렵기 때문이다.

**rgeos**와 **rgdal** 패키지의 퇴역과 함께, **sp** 패키지가 이들과 맺고 있던 기존 연결성은 **sf** 패키지와의 연결로 대체되었다. 여기에는 예를 들어 좌표참조계(CRS) 식별자의 검증이나, 링이 내부 홀인지 외부 링인지 확인하는 작업 등이 포함된다. **maptools** 패키지에서 선택된 일부 함수도 **sp** 패키지로 이전되었다.

## sf와 sp 패키지의 연결성 및 차별성

**sf**와 **sp** 패키지는 여러 측면에서 차이를 보인다. 가장 두드러진 차이는 **sp** 클래스가 엄격한 S4 클래스를 사용하는 반면, **sf**는 보다 유연한 S3 클래스 계층을 사용한다는 점이다. **sf** 객체는 `data.frame` 또는 `tibble`에서 파생되므로, 기존 R 생태계, 특히 **tidyverse** 계열 패키지와의 연동이 용이하다. `sf` 객체는 기하 데이터를 리스트-컬럼(list-column)에 저장하며, 이로 인해 기하 데이터가 항상 리스트 요소 형태로 유지된다. 반면, **sp** 패키지는 데이터 구조를 덜 엄격하게 설계하여, 예를 들어 `SpatialPoints`나 `SpatialPixels`의 모든 좌표를 행렬 형태로 저장한다. 이러한 방식은 리스트-컬럼으로는 구현할 수 없지만, 특정 문제에서는 더 나은 성능을 제공한다. `sf` 객체 `x`를 **sp** 객체로 변환하려면 다음과 같이 수행한다.

```{r}
#| eval: false
library(sp)
y = as(x, "Spatial")
```

그리고, 반대로 `sp` 객체를 **sf** 객체로 변환하려면 다음과 같이 한다.

```{r}
#| eval: false
x0 = st_as_sf(y)
```

이러한 변환에는 몇 가지 제약이 있다.

-   **sp**는 `LINESTRING`과 `MULTILINESTRING`, 또는 `POLYGON`과 `MULTIPOLYGON` 지오메트리를 구분하지 않는다. 예를 들어, `LINESTRING`을 `sp`로 변환한 후 다시 **sf**로 변환하면 `MULTILINESTRING`으로 반환된다.

-   **sp**는 `GEOMETRYCOLLECTION`를 지원하지 않으며, '빅 세븐' (3.1.1절) 범주에 포함되지 않는 지오메트리를를 표현할 구조가 없다.

-   혼합된 지오메트리를 포함한 `GEOMETRY` 유형의 `sf` 또는 `sfc` 객체는 `sp` 객체로 변환할 수 없다.

-   속성-지오메트리 관계 속성은 **sp**로 변환 시 손실된다.

-   두 개 이상의 지오메트리 리스트-컬럼을 가진 `sf` 객체는 **sp**로 변환 시 부차적인 리스트-컬럼이 삭제된다.

## 코드와 패키지 마이그레이션

**sf**의 GitHub 위키 페이지(<https://github.com/r-spatial/sf/wiki/Migrating>)에는 **rgeos**, **rgdal**, **sp**의 메서드 및 함수와 그에 데응하는 **sf** 메서드 및 함수의 목록이 정리되어 있다. 이 자료는 기존 코드나 패키지를 **sf**로 전환할 때 유용하다.

가장 간단한 마이그래이션 사례는 **rgdal** 패키지의 `readOGR()` 함수만으로 파일을 읽던 코드를 **sf** 패키지의 `read_sf()` 함수로 바꾸는 것이다. 기존 코드가 sp 클래스를 기대한다면, **sf**로 읽은 뒤 **sp**로 변환하는 방식이 편리하다.(역자주: 여기서 '마이그레이션(migration)'은 기존 시스템이나 환경에서 새로운 시스템이나 환경으로 코드나 데이터를 이전 및 전환하는 과정을 의미한다. 여기서는 구 버전 R 공간 패키지에서 최신 패키지로 코드를 옮기고 호환성을 확보하는 과정을 가리킨다.)

```{r}
#| eval: false
x = as(sf::read_sf("file"), "Spatial")
```

다만 `readOGR()` 함수를 계속 사용할 경우에는 아규먼트를 더 주의해서 다뤄야 한다. 현재 우리는 **rgdal**, **rgeos**, **maptools** 없이, 가능하면 **sp** 없이도 전반이 동작하도록 과거 도서 'R을 활용한 응용 공간데이터분석(Applied Spatial Data Analysis with R)*'*(Virgilio Gómez-Rubio, Bivand, Pebesma, Gómez-Rubio, 2013)의 모든 코드를 변환하는 작업을 진행 중이다. 관련 스크립트는 다음에서 확인할 수 있다. <https://github.com/rsbivand/sf_asdar2ed>

## raster와 terra 패키지

**raster** 패키지는 2010년부터 R에서 래스터 데이터 분석의 핵심 도구로 사용되어 왔으면, 이후 '공간데이터분석과 모델링(Geographic Data Analysis and Modeling)'(Hijmans 2023a) 패키지로 발전하여 다양한 공간데이터 처리에 활용되었다. **raster** 패키지는 벡터 데이터를 처리를 위해 **sp** 객체를 사용하고, GDAL 라이브러리 형식의 데이터 입출력시 **terra**를 활용한다. 후속 패키지인 **terra**는 '공간데이터분석(Spatial Data Analysis)'(Hijmans 2023b)을 위한 도구로, "**raster** 패키지와 매우 유사하지만 \[…\] 더 많은 기능을 제공하며, 사용하기 쉽고, \[…\] 더 빠르다." **terra** 패키지는 벡터 데이터용 자체 클래스를 제공하면서도 대부분의 **sf** 객체를 받아들인다. 다만, 위에서 언급한 **sp** 변환 시와 유사한 제약이 적용된다. 또한 **terra** 패키지는 GDAL, GEOS, PROJ와 직접 연결 되므로 별도의 패키지가 필요 없다.

**raster** 또는 **terra** 패키지의 래스터 레이어나 래스터 스택은 `st_as_stars()` 함수를 사용해 `stars` 객체로 변환할 수 있다. **terra**의 `SpatVector` 객체는 **sf**의 `st_as_sf()` 함수를 통해 를 변환할 수 있다.

로버트 히즈먼(Robert Hijmans)이 저술한 온라인 저서 'R과 terra를 활용한 공간데이터사이언스(Spatial Data Science with R and "terra")*'*(<https://rspatial.org/terra>)에서는 **terra**를 활용한 공간데이터분석 방법을 자세히 다룬다. **sf**, **stars** 및 이 책에서 다루는 여러 r-spatial 패키지는 `r-spatial` GitHub 조직에 속해 있으며(여기서 `r`과 `spatial` 사이에는 하이픈이 있다. 히즈먼의 조직에는 하이픈이 없음). 해당 조직 블로그(<https://r-spatial.org/book>) 에서 책 링크를 확인할 수 있다.

**sf**, **stars**, **terra** 패키지는 공통의 목표를 공유하고 있지만 접근 방식에서 차이를 보인다. 데이터 분석, 소프트웨어 엔지니어링, 커뮤니티 운영에 대한 강조점이 서로 달라 일부 사용자에게 혼란을 줄 수 있지만, 이러한 다양성은 R 패키지 생태계를 더욱 풍부하게 만들고 선택지를 확장한다. 이느 사용자가 R로 공간데이터를 다루는 과정에서 새로운 시도를 이어가도록 장려하며, 궁극적으로 R spatial의 발전과 확신에 기여한다.
