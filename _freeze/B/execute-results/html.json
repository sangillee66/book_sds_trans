{
  "hash": "0f545d81d492a25fb2c4d38894acd7c7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ndate-modified: last-modified\nnumber-sections: false\nformat: \n  html: \n    toc: true\ncode-link: true\ncode-copy: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\neditor: visual\n---\n\n\n# R 기초 {#sec-basics}\n\n여기서는 이 책을 읽는 데 도움이 될 수 있는 최소한의 R 기초를 제공한다. R 기초에 대한 보다 자세한 내용은 Wickham (2014) 2장을 보라.\n\n## 파이프 오퍼레이터\n\n`|>` (파이프) 기호는 '*그렇다면*'으로 읽어야 한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na |> b() |> c() |> d(n = 10)\n```\n:::\n\n\n위의 코드는 `a`를 실행한 후 `b`를 실행하고, 그 다음에 `c`, `d`를 실행하며, `n`은 10인 경우와 같다는 의미이다. 이 파이프 코드는 다음과 같이 쓸 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nd(c(b(a)), n = 10)\n```\n:::\n\n\n혹은 다음과 같이 쓸 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmp1 <- b(a)\ntmp2 <- c(tmp1)\ntmp3 <- d(tmp2, n = 10)\n```\n:::\n\n\n많은 사람들은 이러한 파이프 형태가 읽기 쉽다고 생각할 것이다. 왜냐하면 실행 순서가 읽는 순서대로 왼쪽에서 오른쪽으로 진행되기 때문에. 위의 두 번째 구문에 나타나 있는 포섭 함수 호출처럼, 중간 결과에 대해 이름을 지정할 필요가 없게 된다. 그런데 포섭 함수 호출처럼, 예상과 다른 중간 결과를 디버깅하는 것이 어렵게 된다. 중간 결과는 메모리에 존재하므로 세 번째 구문에 비해 메모리 할당의 절약을 기대할 수는 없다는 점은 유의할 필요가 있다. 원래 파이프 오퍼레이터는 **magrittr** 패키지에서 `%>%`의 형태로 제시되었지만, R 4.1.0에서 네이티브 파이프로 수용되어 `|>` 기호를 사용하고 있다. 어느 쪽을 사용해도 상관이 없다.\n\n## 데이터 구조\n\nChambers (2016)에 의해 지적된 바와 같이, \"*R에서 존재하는 모든 것은 객체이다*\". 객체에는 언어 객체나 함수와 같이 특정한 일을 하는 객체뿐만 아니라 데이터 객체와 같은 더 기본적인 \"*것들*\"도 포함된다. 다음에서 몇 가지 기본적인 R 데이터 구조에 대해 논의하겠다.\n\n### 동질 벡터\n\n데이터 객체는 데이터를 포함하고 있으며, 때로는 메타데이터도 포함된다. 데이터는 항상 벡터 형태로 존재하며, 벡터는 다양한 유형을 가질 수 있다. 유형은 `typeof()` 함수를 사용하여 확인할 수 있으며, 벡터의 길이는 `length()` 함수를 사용하여 확인할 수 있다. 벡터는 `c()` 함수를 사용하여 개별 요소들을 결합함으로써 생성된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(1:10)\n# [1] \"integer\"\nlength(1:10)\n# [1] 10\ntypeof(1.0)\n# [1] \"double\"\nlength(1.0)\n# [1] 1\ntypeof(c(\"foo\", \"bar\"))\n# [1] \"character\"\nlength(c(\"foo\", \"bar\"))\n# [1] 2\ntypeof(c(TRUE, FALSE))\n# [1] \"logical\"\n```\n:::\n\n\n이런 종류의 벡터를 동질(homegeneous) 벡터라고 부르는데, 이는 이러한 종류의 벡터가 오로지 한 가지 유형의 데이터만을 가질 수 있기 때문이다.\n\n벡터는 길이가 0일 수 있다는 점에 유의해야 한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ni <- integer(0)\ntypeof(i)\n# [1] \"integer\"\ni\n# integer(0)\nlength(i)\n# [1] 0\n```\n:::\n\n\n우리는 한 벡터의 요소들을 `[` 혹은 `[[`를 이용하여 불러올 수 있다(할당의 맥락에서는 요소들을 대체할 수 있다).\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(1,2,3)\na[2]\n# [1] 2\na[[2]]\n# [1] 2\na[2:3]\n# [1] 2 3\na[2:3] <- c(5,6)\na\n# [1] 1 5 6\na[[3]] <- 10\na\n# [1]  1  5 10\n```\n:::\n\n\n차이점은 `[ ]`는 인덱스 *범위*(또는 여러 인덱스)에 대해 작업할 수 있는 반면, `[[ ]]`는 단일 벡터 값에 대해 작업한다는 것이다.\n\n### 이질 벡터: `list`\n\n두 번째 벡터 유형은 `list`로, 상이한 유형을 결합할 수 있다는 의미에서 이질(heterogeneous) 벡터라고 불린다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- list(3, TRUE, \"foo\")\ntypeof(l)\n# [1] \"list\"\nlength(l)\n# [1] 3\n```\n:::\n\n\n리스트에는 `[ ]`와 `[[ ]]` 사이에 추가적인 구분이 있다. 즉, 단일 `[ ]`는 항상 리스트를 반환하고, `[[ ]]`는 리스트 요소의 *내용*을 반환한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl[1]\n# [[1]]\n# [1] 3\nl[[1]]\n# [1] 3\n```\n:::\n\n\n교체의 맥락에서는, 리스트를 제공할 때는 `[ ]`를 사용하고, 새로운 값을 제공할 때는 `[[ ]]`를 사용한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl[1:2] <- list(4, FALSE)\nl\n# [[1]]\n# [1] 4\n# \n# [[2]]\n# [1] FALSE\n# \n# [[3]]\n# [1] \"foo\"\nl[[3]] <- \"bar\"\nl\n# [[1]]\n# [1] 4\n# \n# [[2]]\n# [1] FALSE\n# \n# [[3]]\n# [1] \"bar\"\n```\n:::\n\n\n리스트 요소에 *이름*을 지정할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- list(first = 3, second = TRUE, third = \"foo\")\nl\n# $first\n# [1] 3\n# \n# $second\n# [1] TRUE\n# \n# $third\n# [1] \"foo\"\n```\n:::\n\n\n`l[[\"second\"]]`와 같은 방식으로 이름을 사용할 수고, 좀 더 단순한 형태로 사용할 수도 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl$second\n# [1] TRUE\nl$second <- FALSE\nl\n# $first\n# [1] 3\n# \n# $second\n# [1] FALSE\n# \n# $third\n# [1] \"foo\"\n```\n:::\n\n\n이름을 사용하는 것은 편리해 보이지만, 이름 속성에서 이름을 우선 찾아야 한다는 점도 있다(아래 참조).\n\n### NULL과 리스트 요소의 제거\n\n`NULL`은 R에서 널(null) 값을 표현하는 방식이다. `NULL`은 단순 비교에서 상식적인 결과가 도출되지 않는다는 점에서 주의를 요한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n3 == NULL # not FALSE!\n# logical(0)\nNULL == NULL # not even TRUE!\n# logical(0)\n```\n:::\n\n\n따라서 특별히 취급되어야 하는데, `is.null()` 함수가 유용하다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nis.null(NULL)\n# [1] TRUE\n```\n:::\n\n\n리스트의 특정 요소를 제거하려면, 제거 대상을 포함하지 않는 새로운 리스트를 생성하면 된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl <- l[c(1,3)] # remove second, implicitly\nl\n# $first\n# [1] 3\n# \n# $third\n# [1] \"foo\"\n```\n:::\n\n\n혹은, 제거 대상에 `NULL`을 할당할 수도 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nl$second <- NULL\nl\n# $first\n# [1] 3\n# \n# $third\n# [1] \"foo\"\n```\n:::\n\n\n### 속성\n\n임의의 메타데이터 객체를 데이터 객체에 결합하는 것이 가능하다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1:3\nattr(a, \"some_meta_data\") = \"foo\"\na\n# [1] 1 2 3\n# attr(,\"some_meta_data\")\n# [1] \"foo\"\n```\n:::\n\n\n이 메타데이터를 검색하거나 교체할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattr(a, \"some_meta_data\")\n# [1] \"foo\"\nattr(a, \"some_meta_data\") <- \"bar\"\nattr(a, \"some_meta_data\")\n# [1] \"bar\"\n```\n:::\n\n\n본질적으로 객체의 속성은 이름이 지정된 리스트이며, 우리는 전체 리스트를 다음과 같이 가져오거나 설정할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(a)\n# $some_meta_data\n# [1] \"bar\"\nattributes(a) = list(some_meta_data = \"foo\")\nattributes(a)\n# $some_meta_data\n# [1] \"foo\"\n```\n:::\n\n\nR은 여러 속성을 특별하게 처리하며, 전체 세부 사항은 `?attributes`에서 확인할 수 있다. 이제 몇 가지 특별한 속성에 대해 설명하고자 한다.\n\n#### 객체 클래스와 `class` 속성\n\nR의 모든 객체는 \"클래스를 가진다\"가 의미하는 바처럼, `class(obj)`는 `obj`의 클래스에 대한 문자 벡터를 반환한다. 일부 객체는 기본 벡터와 같은 *암시적* 클래스를 가진다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(1:3)\n# [1] \"integer\"\nclass(c(TRUE, FALSE))\n# [1] \"logical\"\nclass(c(\"TRUE\", \"FALSE\"))\n# [1] \"character\"\n```\n:::\n\n\n클래스를 명시적으로 설정할 수도 있다. `attr`을 사용하거나 표현식의 왼쪽에서 `class`를 사용하면 된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1:3\nclass(a) <- \"foo\"\na\n# [1] 1 2 3\n# attr(,\"class\")\n# [1] \"foo\"\nclass(a)\n# [1] \"foo\"\nattributes(a)\n# $class\n# [1] \"foo\"\n```\n:::\n\n\n이 경우, 새로 설정된 클래스가 이전의 암시적인 클래스를 덮어쓴다. 이렇게 하면, 클래스 이름을 메서드 이름에 추가하여 `foo` 클래스에 대한 메서드를 추가할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint.foo <- function(x, ...) { \n    print(paste(\"an object of class foo with length\", length(x)))\n}\nprint(a)\n# [1] \"an object of class foo with length 3\"\n```\n:::\n\n\n이러한 메서드를 제공하는 목적은 일반적으로 더 사용하기 쉬운 소프트웨어를 만드는 것이지만, 동시에 객체를 더 불투명하게 만들 수도 있다. 클래스 속성이 제거된 후 객체를 출력하여 \"무엇으로 구성되어 있는지\" 확인하는 것이 때때로 유용할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunclass(a)\n# [1] 1 2 3\n```\n:::\n\n\n좀 더 구체적인 예로, 패키지 `sf` 패키지를 사용하여 다각형을 만드는 경우를 고려해보자.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf) |> suppressPackageStartupMessages()\np <- st_polygon(list(rbind(c(0,0), c(1,0), c(1,1), c(0,0))))\np\n# POLYGON ((0 0, 1 0, 1 1, 0 0))\n```\n:::\n\n\n이것은 잘 알려진 텍스트 형식(WKT)을 출력한다. 데이터 구조가 어떤지 알아보려면, 다음과 같이 하면 된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunclass(p)\n# [[1]]\n#      [,1] [,2]\n# [1,]    0    0\n# [2,]    1    0\n# [3,]    1    1\n# [4,]    0    0\n```\n:::\n\n\n#### `dim` 속성\n\n`dim` 속성은 행렬 또는 어레이(array)의 차원을 설정한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1:8\nclass(a)\n# [1] \"integer\"\nattr(a, \"dim\") <- c(2,4) # or: dim(a) = c(2,4)\nclass(a)\n# [1] \"matrix\" \"array\"\na\n#      [,1] [,2] [,3] [,4]\n# [1,]    1    3    5    7\n# [2,]    2    4    6    8\nattr(a, \"dim\") <- c(2,2,2) # or: dim(a) = c(2,2,2)\nclass(a)\n# [1] \"array\"\na\n# , , 1\n# \n#      [,1] [,2]\n# [1,]    1    3\n# [2,]    2    4\n# \n# , , 2\n# \n#      [,1] [,2]\n# [1,]    5    7\n# [2,]    6    8\n```\n:::\n\n\n### `names` 속성\n\n이름이 지정된 벡터는 `names` 속성에 이름을 가지고 있다. 위에서 리스트의 예를 봤고, 숫자 벡터의 예는 다음과 같다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(first = 3, second = 4, last = 5)\na[\"second\"]\n# second \n#      4\nattributes(a)\n# $names\n# [1] \"first\"  \"second\" \"last\"\n```\n:::\n\n\n다른 이름 속성으로는 행렬이나 어레이의 `dimnames`가 있다. 이는 차원의 이름뿐만 아니라 각 차원에 연관된 값의 레이블도 지정한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\na <- matrix(1:4, 2, 2)\ndimnames(a) <- list(rows = c(\"row1\", \"row2\"),\n                    cols = c(\"col1\", \"col2\"))\na\n#       cols\n# rows   col1 col2\n#   row1    1    3\n#   row2    2    4\nattributes(a)\n# $dim\n# [1] 2 2\n# \n# $dimnames\n# $dimnames$rows\n# [1] \"row1\" \"row2\"\n# \n# $dimnames$cols\n# [1] \"col1\" \"col2\"\n```\n:::\n\n\n`data.frame` 객체는 행과 열을 가지며, 각 행과 열에는 이름이 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(a = 1:3, b = c(TRUE, FALSE, TRUE))\nattributes(df)\n# $names\n# [1] \"a\" \"b\"\n# \n# $class\n# [1] \"data.frame\"\n# \n# $row.names\n# [1] 1 2 3\n```\n:::\n\n\n### `structure`의 사용\n\n프로그래밍할 때, 객체를 반환하기 전에 속성을 추가하거나 수정하는 패턴은 매우 일반적이다. 다음의 예시를 보자.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(x) {\n   a <- create_obj(x) # call some other function\n   attributes(a) <- list(class = \"foo\", meta = 33)\n   a\n}\n```\n:::\n\n\n마지막 두 문장은 다음과 같이 축약할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nf <- function(x) {\n   a <- create_obj(x) # call some other function\n   structure(a, class = \"foo\", meta = 33)\n}\n```\n:::\n\n\n여기서 `structure()` 함수는 첫 번째 아규먼트로 전달된 객체의 속성을 추가 및 교체하거나(값이 `NULL`인 경우) 속성을 제거한다.\n\n## `MULTIPOLYGON` 분할하기\n\n위의 예를 사용하여 `MULTIPOLYGON`이 포함된 `sf` 객체를 여러 조각으로 분해할 수 있다. 예를 들어, `nc` 데이터셋을 사용한다고 가정해보자.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem.file(\"gpkg/nc.gpkg\", package = \"sf\") |> \n    read_sf() -> nc\n```\n:::\n\n\n`nc`의 속성에서 다음을 볼 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(nc)\n# $names\n#  [1] \"AREA\"      \"PERIMETER\" \"CNTY_\"     \"CNTY_ID\"   \"NAME\"     \n#  [6] \"FIPS\"      \"FIPSNO\"    \"CRESS_ID\"  \"BIR74\"     \"SID74\"    \n# [11] \"NWBIR74\"   \"BIR79\"     \"SID79\"     \"NWBIR79\"   \"geom\"     \n# \n# $row.names\n#   [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15\n#  [16]  16  17  18  19  20  21  22  23  24  25  26  27  28  29  30\n#  [31]  31  32  33  34  35  36  37  38  39  40  41  42  43  44  45\n#  [46]  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60\n#  [61]  61  62  63  64  65  66  67  68  69  70  71  72  73  74  75\n#  [76]  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n#  [91]  91  92  93  94  95  96  97  98  99 100\n# \n# $class\n# [1] \"sf\"         \"tbl_df\"     \"tbl\"        \"data.frame\"\n# \n# $sf_column\n# [1] \"geom\"\n# \n# $agr\n#      AREA PERIMETER     CNTY_   CNTY_ID      NAME      FIPS \n#      <NA>      <NA>      <NA>      <NA>      <NA>      <NA> \n#    FIPSNO  CRESS_ID     BIR74     SID74   NWBIR74     BIR79 \n#      <NA>      <NA>      <NA>      <NA>      <NA>      <NA> \n#     SID79   NWBIR79 \n#      <NA>      <NA> \n# Levels: constant aggregate identity\n```\n:::\n\n\n`geom`이라는 이름의 지오메트리 컬럼이 있다는 것을 알 수 있다. 이 컬럼만 끄집어 낼 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc$geom\n# Geometry set for 100 features \n# Geometry type: MULTIPOLYGON\n# Dimension:     XY\n# Bounding box:  xmin: -84.3 ymin: 33.9 xmax: -75.5 ymax: 36.6\n# Geodetic CRS:  NAD27\n# First 5 geometries:\n# MULTIPOLYGON (((-81.5 36.2, -81.5 36.3, -81.6 3...\n# MULTIPOLYGON (((-81.2 36.4, -81.2 36.4, -81.3 3...\n# MULTIPOLYGON (((-80.5 36.2, -80.5 36.3, -80.5 3...\n# MULTIPOLYGON (((-76 36.3, -76 36.3, -76 36.3, -...\n# MULTIPOLYGON (((-77.2 36.2, -77.2 36.2, -77.3 3...\n```\n:::\n\n\n해당 컬럼만을 포함한 객체가 다음의 속성을 가지고 있음을 확인할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(nc$geom)\n# $n_empty\n# [1] 0\n# \n# $crs\n# Coordinate Reference System:\n#   User input: NAD27 \n#   wkt:\n# GEOGCRS[\"NAD27\",\n#     DATUM[\"North American Datum 1927\",\n#         ELLIPSOID[\"Clarke 1866\",6378206.4,294.978698213898,\n#             LENGTHUNIT[\"metre\",1]]],\n#     PRIMEM[\"Greenwich\",0,\n#         ANGLEUNIT[\"degree\",0.0174532925199433]],\n#     CS[ellipsoidal,2],\n#         AXIS[\"geodetic latitude (Lat)\",north,\n#             ORDER[1],\n#             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#         AXIS[\"geodetic longitude (Lon)\",east,\n#             ORDER[2],\n#             ANGLEUNIT[\"degree\",0.0174532925199433]],\n#     USAGE[\n#         SCOPE[\"Geodesy.\"],\n#         AREA[\"North and central America: Antigua and Barbuda - onshore. Bahamas - onshore plus offshore over internal continental shelf only. Belize - onshore. British Virgin Islands - onshore. Canada onshore - Alberta, British Columbia, Manitoba, New Brunswick, Newfoundland and Labrador, Northwest Territories, Nova Scotia, Nunavut, Ontario, Prince Edward Island, Quebec, Saskatchewan and Yukon - plus offshore east coast. Cuba - onshore and offshore. El Salvador - onshore. Guatemala - onshore. Honduras - onshore. Panama - onshore. Puerto Rico - onshore. Mexico - onshore plus offshore east coast. Nicaragua - onshore. United States (USA) onshore and offshore - Alabama, Alaska, Arizona, Arkansas, California, Colorado, Connecticut, Delaware, Florida, Georgia, Idaho, Illinois, Indiana, Iowa, Kansas, Kentucky, Louisiana, Maine, Maryland, Massachusetts, Michigan, Minnesota, Mississippi, Missouri, Montana, Nebraska, Nevada, New Hampshire, New Jersey, New Mexico, New York, North Carolina, North Dakota, Ohio, Oklahoma, Oregon, Pennsylvania, Rhode Island, South Carolina, South Dakota, Tennessee, Texas, Utah, Vermont, Virginia, Washington, West Virginia, Wisconsin and Wyoming - plus offshore . US Virgin Islands - onshore.\"],\n#         BBOX[7.15,167.65,83.17,-47.74]],\n#     ID[\"EPSG\",4267]]\n# \n# $class\n# [1] \"sfc_MULTIPOLYGON\" \"sfc\"             \n# \n# $precision\n# [1] 0\n# \n# $bbox\n#  xmin  ymin  xmax  ymax \n# -84.3  33.9 -75.5  36.6\n```\n:::\n\n\n네 번째 리스트 요소의 *내용*을 가져온다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc$geom[[4]] |> format(width = 60, digits = 5)\n# [1] \"MULTIPOLYGON (((-76.009 36.32, -76.017 36.338, -76.033 36...\"\n```\n:::\n\n\n객체의 클래스가 리스트임을 확인한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(nc$geom[[4]])\n# [1] \"list\"\n```\n:::\n\n\n어떤 속성이 있는지 확인한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nattributes(nc$geom[[4]])\n# $class\n# [1] \"XY\"           \"MULTIPOLYGON\" \"sfg\"\n```\n:::\n\n\n그리고 `length`를 확인한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(nc$geom[[4]])\n# [1] 3\n```\n:::\n\n\n길이는 외부 링의 개수를 나타낸다. 멀티폴리곤은 하나 이상의 폴리곤으로 구성될 수 있다. 대부분의 카운티는 하나의 폴리곤만 가지고 있음을 알 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlengths(nc$geom)\n#   [1] 1 1 1 3 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n#  [32] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 3 2 1 1 1 1 1\n#  [63] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 1 1 1 2 1 1\n#  [94] 1 2 1 1 1 1 1\n```\n:::\n\n\n멀티폴리곤은 폴리곤의 리스트이다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(nc$geom[[4]])\n# [1] \"list\"\n```\n:::\n\n\n네 번째 멀티폴리곤의 *첫 번째* 폴리곤은 다시 리스트이다. 왜냐하면 폴리곤은 외부 링을 가지며, 그 뒤에 여러 개의 내부 링(구멍)이 올 *수* 있기 때문이다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(nc$geom[[4]][[1]])\n# [1] \"list\"\n```\n:::\n\n\n해당 폴리곤이 외부 링 하나만 포함하고 있음을 알 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(nc$geom[[4]][[1]])\n# [1] 1\n```\n:::\n\n\n해당 폴리곤의 유형, 차원, 첫 번째 좌표 집합를 다음과 같이 출력할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(nc$geom[[4]][[1]][[1]])\n# [1] \"double\"\ndim(nc$geom[[4]][[1]][[1]])\n# [1] 26  2\nhead(nc$geom[[4]][[1]][[1]])\n#       [,1] [,2]\n# [1,] -76.0 36.3\n# [2,] -76.0 36.3\n# [3,] -76.0 36.3\n# [4,] -76.0 36.4\n# [5,] -76.1 36.3\n# [6,] -76.2 36.4\n```\n:::\n\n\n속성을 변경할 수 있는데, 예를 들어 세 번째 좌표의 위도값을 다음과 같이 변경할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc$geom[[4]][[1]][[1]][3,2] <- 36.5\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}