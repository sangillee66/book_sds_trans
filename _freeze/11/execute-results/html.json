{
  "hash": "e8fe44bf6fec260d3d69bcd9a769f83b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ndate-modified: last-modified\nnumber-sections: true\nformat: \n  html: \n    toc: true\ncode-link: true\ncode-copy: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\neditor: visual\neditor_options: \n  chunk_output_type: console\n---\n\n\n# 포인트 패턴 분석 {#sec-point}\n\n포인트 패턴 분석은 공간 상의 포인트 패턴을 기술하거나 그러한 패턴을 야기한 프로세스에 대한 추론을 행한다. 여기서 핵심적인 사항은 포인트들의 위치 정보인데, 이러한 위치는 샘플링을 위한 통제 지점이 아니라, 특정한 프로세스의 산물(동물 목격 지점, 사고 지점, 발병 지점, 수목 지점 등)이다. 이것은 모든 지점에서 해당 현상이 발생하지만 관측값은 우리가 통제한 관측 지점에서만 획득된 것이라고 보는 지구통계학적 프로세스(12장)와 대조된다. 그러므로, 지구통계학적 연구의 주된 관심은 관측 지점에 있는 것이 아니라 비관측 지점의 값을 추정하는 데 있다. 포인트 패턴 분석은 해당 지역의 모든 지점에서 관측이 이루어질 수 있다고 가정한다. 이는 특정 지점에 포인트가 없다면 해당 지점에서 관측이 이루어지지 않았다는 것이 아니라(지구통계학적 프로세스) 관측은 이루어졌지만 현상이 발생하지 않았다는 것을 의미한다. 확률 과정(random process)의 용어로 말하자면, 포인트 패턴 분석에서 위치는 확률 변수이지만, 지구통계학적 분석에서 측정 변수는 고정 위치를 가진 랜덤 필드이다.\n\n이 장에서는 **spatstat** 패키지(Baddeley, Turner, Rubak 2022)를 활용한 포인트 패턴 분석의 기초만을 다룬다. 포인트 패턴 이론과 **spatstat** 및 관련 패키지의 사용에 대한 포괄적인 내용은 Baddeley, Rubak, Turner(2015)의 **spatstat** 책에 잘 나타나 있다. 이 장에서는 특정 주제만을 다루게 되는데, 해당 주제가 누락된 주제에 비해 더 중요하다는 의미는 전혀 아니다. **spatstat** 패키지와 보다 공간데이터사이언스 지향 패키지인 **sf** 및 **stars** 간의 인터페이스를 설명하는데 공간을 할애하려 한다. 포인트 패턴 분석을 소개하는 또 다른 책으로는 Stoyan et al.(2017)가 있다. 시공간 포인트 프로세스 분석용 R 패키지인 **stpp**(Gabriel et al. 2022)에 대한 내용은 Gabriel, Rowlingson, Diggle(2013)를 참고할 수 있다.\n\n포인트 패턴 분석에서 중요한 개념은 포인트 *패턴*과 포인트 *프로세스*를 구분하는 것이다. 포인트 프로세스는 포인트 패턴을 생성하는 확률 과정(stochastic process)이다. 데이터셋은 항상 포인트 패턴이며, 추론은 우리가 관찰한 패턴을 생성할 수 있는 프로세스의 특성을 파악하는 것이다. 공간 포인트 프로세스의 특성에는 다음이 포함된다.\n\n-   1차 특성: 강도 함수는 단위 면적당 포인트의 수를 측정하며, 이 함수는 *이질적*(inhomogeneous) 포인트 프로세스의 경우 공간적으로 변동한다.\n\n-   2차 특성: 주어진 강도 함수(고정 혹은 변동) 하에서, 포인트들이 *서로* 독립적으로 분포하는지, 서로 끌어당기는 경향이 있는지(군집화), 또는 서로 밀어내는 경향이 있는지(완전 공간 무작위성(complete spatial randomness)보다 더 규칙적으로 분포하는지)를 묘사한다.\n\n## 관측 윈도우\n\n포인트 패턴을 관측 윈도우를 가진다. 다음의 코드를 통해 무작위 포인트 패턴을 생성한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sf)\n# Linking to GEOS 3.11.1, GDAL 3.6.4, PROJ 9.1.1; sf_use_s2() is TRUE\nn <- 30\nset.seed(13531) # remove this to create another random sequence\nxy <- data.frame(x = runif(n), y = runif(n)) |> \n    st_as_sf(coords = c(\"x\", \"y\"))\n```\n:::\n\n\n이 포인트들은 $[0,1]\\times[1,0]$ 영역 내에 고르게 분포하고 있는데, 완전히 공간적으로 무작위로 분포하고 표현할 수도 있다. 그런데 영역의 크기가 확대되면 고르게 분포하고 있다는 말을 하기 어려워 진다. 예를 들어 아래의 코드로 두 개의 정사각형 영역(`w1`과 `w2`)을 생성한다(그림 11.1).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nw1 <- st_bbox(c(xmin = 0, ymin = 0, xmax = 1, ymax = 1)) |> \n        st_as_sfc() \nw2 <- st_sfc(st_point(c(1, 0.5))) |> st_buffer(1.2)\n```\n:::\n\n\n![관찰 윈도우(회색)에 따라 동일한 포인트 패턴이 공간적으로 완전히 무작위로 나타날 수도 있고(왼쪽), 군집을 이루고 있는 것으로 나타날 수도 있다(오른쪽).](https://r-spatial.org/book/11-PointPattern_files/figure-html/fig-pp1-1.png){#fig-11-1}\n\n**spatstat** 패키지는 포인트 패턴을 `ppp` 클라스의 객체로 저장한다. 모든 `ppp` 객체는 포인트 위치 정보와 관측 윈도우(`owin` 클라스의 객체)를 가진다. 다음과 같이 포인트로부터 ppp 객체로 생성할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(spatstat) |> suppressPackageStartupMessages()\nas.ppp(xy)\n# Planar point pattern: 30 points\n# window: rectangle = [0.009, 0.999] x [0.103, 0.996] units\n```\n:::\n\n\n여기서 윈도우가 지정되지 않으면 포인트들의 바운딩 박스가 관측 윈도우로 사용됨을 볼 수 있다. 데이터셋의 첫 번째 피처로 폴리곤 지오메트리를 추가하면, 해당 폴리곤이 관측 윈도우로 사용된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(pp1 <- c(w1, st_geometry(xy)) |> as.ppp())\n# Planar point pattern: 30 points\n# window: polygonal boundary\n# enclosing rectangle: [0, 1] x [0, 1] units\nc1 <- st_buffer(st_centroid(w2), 1.2)\n(pp2 <- c(c1, st_geometry(xy)) |> as.ppp())\n# Planar point pattern: 30 points\n# window: polygonal boundary\n# enclosing rectangle: [-0.2, 2.2] x [-0.7, 1.7] units\n```\n:::\n\n\n포인트 패턴의 등질성(homogeneity)(역자주: 기대 밀도가 어는 지점에서나 동일한가의 여부)을 검정하기 위해 적절한 방격 레이아웃(그림 11.2에는 3 $\\times$ 3 레이아웃이 나타나 있다)를 사용하여 방격 빈도(quadrat count)(방격별 포인트 수)를 구할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow = c(1, 2), mar = rep(0, 4))\nq1 <- quadratcount(pp1, nx=3, ny=3)\nq2 <- quadratcount(pp2, nx=3, ny=3)\nplot(q1, main = \"\")\nplot(xy, add = TRUE)\nplot(q2, main = \"\")\nplot(xy, add = TRUE)\n```\n:::\n\n\n![두 포인트 패턴의 3 X 3 방격 빈도](https://r-spatial.org/book/11-PointPattern_files/figure-html/fig-quadrat-1.png){#fig-11-2}\n\n이 방격 빈도 정보를 활용해 다음과 같이 $\\chi^2$ 검정을 수행한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquadrat.test(pp1, nx=3, ny=3)\n# Warning: Some expected counts are small; chi^2 approximation may be\n# inaccurate\n# \n#   Chi-squared test of CSR using quadrat counts\n# \n# data:  pp1\n# X2 = 8, df = 8, p-value = 0.9\n# alternative hypothesis: two.sided\n# \n# Quadrats: 9 tiles (irregular windows)\nquadrat.test(pp2, nx=3, ny=3)\n# Warning: Some expected counts are small; chi^2 approximation may be\n# inaccurate\n# \n#   Chi-squared test of CSR using quadrat counts\n# \n# data:  pp2\n# X2 = 43, df = 8, p-value = 2e-06\n# alternative hypothesis: two.sided\n# \n# Quadrats: 9 tiles (irregular windows)\n```\n:::\n\n\n이는 두 번째 사례가 CSR(완전공간무작위성) 패턴이 아님을 나타낸다. 경고 메시지에서 언급된 것처럼 기대 빈도 수가 너무 적기 때문에 유의 확률(p-값)을 매우 신중하게 해석해야 한다.\n\n`density` 함수를 통해 커널 밀도를 계산할 수 있으며 커널의 형태와 탐색반경에 조정할 수 있다. 탐색반경 파라미터인 `sigma`는 `bw.diggle` 함수의 교차 검증을 통해 지정되며, 그림 11.3에 생성된 밀도면이 나타나 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nden1 <- density(pp1, sigma = bw.diggle)\nden2 <- density(pp2, sigma = bw.diggle)\n```\n:::\n\n\n![두 포인트 패턴에 대한 커널 밀도면](https://r-spatial.org/book/11-PointPattern_files/figure-html/fig-bwdiggle-1.png){#fig-11-3}\n\n이러한 방식으로 생성된 밀도 맵은 명백히 래스터 이미지이며, 이를 `stars` 객체로 전환할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stars)\n# Loading required package: abind\ns1 <- st_as_stars(den1)\n(s2 <- st_as_stars(den2))\n# stars object with 2 dimensions and 1 attribute\n# attribute(s):\n#        Min.  1st Qu. Median Mean 3rd Qu. Max. NA's\n# v  6.28e-15 0.000153  0.304 6.77    13.1 42.7 3492\n# dimension(s):\n#   from  to offset   delta x/y\n# x    1 128   -0.2  0.0187 [x]\n# y    1 128    1.7 -0.0187 [y]\n```\n:::\n\n\n밀도면 하부 체적(역자주: 각 셀별로 면적과 밀도값을 곱하여 셀 체적을 구하고 모든 셀에 대한 이 체적값을 합한 값을 의미한다)을 계산하면 샘플 크기(30)와 유사해진다는 것을 다음의 코드를 통해 확인할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ns1$a <- st_area(s1) |> suppressMessages()\ns2$a <- st_area(s2) |> suppressMessages()\nwith(s1, sum(v * a, na.rm = TRUE))\n# [1] 29\nwith(s2, sum(v * a, na.rm = TRUE))\n# [1] 30.7\n```\n:::\n\n\n여기에 밀도면을 외부 변수의 함수로 나타내는 모델링을 적용하면 좀 더 흥미로운 결과를 얻을 수 있다. 예를 들어, `pp2`의 밀도를 푸아송 포인트 패턴 프로세스으로 모델링하고자 한다고 가정해 보자(즉, 포인트 간에 상호작용이 없음을 가정). 여기서 밀도 강조는 \"클러스터\" 중심으로부터의 거리의 함수이며, 이 거리값은 `stars` 객체에 포함되어 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npt <- st_sfc(st_point(c(0.5, 0.5)))\nst_as_sf(s2, as_points = TRUE, na.rm = FALSE) |>\n  st_distance(pt) -> s2$dist\n```\n:::\n\n\n그런 다음 `ppm`을 사용하여 밀도를 모델링할 수 있으며, 포인트 패턴 객체의 *이름*이 `formula`의 왼쪽에 사용된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(m <- ppm(pp2 ~ dist, data = list(dist = as.im(s2[\"dist\"]))))\n# Nonstationary Poisson process\n# Fitted to point pattern dataset 'pp2'\n# \n# Log intensity:  ~dist\n# \n# Fitted trend coefficients:\n# (Intercept)        dist \n#        4.54       -4.24 \n# \n#             Estimate  S.E. CI95.lo CI95.hi Ztest  Zval\n# (Intercept)     4.54 0.341    3.87    5.21   *** 13.32\n# dist           -4.24 0.700   -5.62   -2.87   *** -6.06\n```\n:::\n\n\n반환된 객체는 `ppm` 클래스이며, 이를 플롯할 수 있다. 그림 11.4는 예측 밀도면을 보여준다. 예측 표준 오차도 플롯할 수 있다.\n\n![ppm 모델에 의거한 예측 밀도면](https://r-spatial.org/book/11-PointPattern_files/figure-html/fig-ppm-1.png){#fig-11-4}\n\n모델에는 예측 메소드도 있어, 이를 통해 `im` 객체를 반환하며, 이 객체는 다음과 같이 `stars` 객체로 전환될 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npredict(m, covariates = list(dist = as.im(s2[\"dist\"]))) |>\n    st_as_stars()\n# stars object with 2 dimensions and 1 attribute\n# attribute(s):\n#      Min. 1st Qu. Median Mean 3rd Qu. Max. NA's\n# v  0.0698   0.529   2.13 6.62     7.3 89.7 3492\n# dimension(s):\n#   from  to offset   delta x/y\n# x    1 128   -0.2  0.0187 [x]\n# y    1 128    1.7 -0.0188 [y]\n```\n:::\n\n\n## CRS\n\n**spatstat** 패키지의 모든 루틴은 데카르트 좌표계를 가진 2차원 데이터를 위해 설계되어 있다. 타원 좌표계를 가진 객체를 전환하려고 하면 오류가 발생한다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsystem.file(\"gpkg/nc.gpkg\", package = \"sf\") |> \n    read_sf() |>\n    st_geometry() |>\n    st_centroid() |>\n    as.ppp()\n# Error: Only projected coordinates may be converted to spatstat\n# class objects\n```\n:::\n\n\n**spatstat** 패키지의 데이터 구조로 전환되고 나면, 처음 사용했던 CSR이 손실된다. 이를 `sf` 또는 `stars` 객체로 되돌리기 위해서는 `st_set_crs`를 사용하면 된다.\n\n## 마크 포인트 패턴, 선형 네트워크 상의 포인트\n\n**spatstat** 패키지에서는 몇 가지 추가 데이터 유형을 서로 전환할 수 있다. 마크(marked) 포인트 패턴은 각 포인트에 대해 범주형 레이블 또는 숫자 레이블을 가진 포인트 패턴이다. **spatstat** 패키지에 포함되어 있는 마크 포인트 패턴으로 `longleaf` 소나무 데이터셋이 있는데, 이 데이터셋에는 가슴 높이에서의 나무 직경이 숫자 마크로 포함되어 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlongleaf\n# Marked planar point pattern: 584 points\n# marks are numeric, of storage type  'double'\n# window: rectangle = [0, 200] x [0, 200] metres\nll <- st_as_sf(longleaf)\nprint(ll, n = 3)\n# Simple feature collection with 585 features and 2 fields\n# Geometry type: GEOMETRY\n# Dimension:     XY\n# Bounding box:  xmin: 0 ymin: 0 xmax: 200 ymax: 200\n# CRS:           NA\n# First 3 features:\n#    spatstat.geom..marks.x.  label                           geom\n# NA                      NA window POLYGON ((0 0, 200 0, 200 2...\n# 1                     32.9  point                POINT (200 8.8)\n# 2                     53.5  point                 POINT (199 10)\n```\n:::\n\n\n값은 다음과 같이 ppp객체로 다시 전환할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.ppp(ll)\n# Warning in as.ppp.sf(ll): only first attribute column is used for\n# marks\n# Marked planar point pattern: 584 points\n# marks are numeric, of storage type  'double'\n# window: polygonal boundary\n# enclosing rectangle: [0, 200] x [0, 200] units\n```\n:::\n\n\n**spatstat** 패키지의 `psp` 클래스의 선분은 LINESTRING 지오메트리를 가진 `sf` 피처로 전환 및 재전환이 가능한데, 관측 윈도우를 가진 POLYGON 피처 하나를 우선적으로 포함하게 된다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(st_as_sf(copper$SouthLines), n = 5)\n# Simple feature collection with 91 features and 1 field\n# Geometry type: GEOMETRY\n# Dimension:     XY\n# Bounding box:  xmin: -0.335 ymin: 0.19 xmax: 35 ymax: 158\n# CRS:           NA\n# First 5 features:\n#     label                           geom\n# 1  window POLYGON ((-0.335 0.19, 35 0...\n# 2 segment LINESTRING (3.36 0.19, 10.4...\n# 3 segment LINESTRING (12.5 0.263, 11....\n# 4 segment LINESTRING (11.2 0.197, -0....\n# 5 segment LINESTRING (6.35 12.8, 16.5...\n```\n:::\n\n\n마지막으로, 선형 네트워크상의 포인트 패턴은 **spatstat** 패키지에서 `lpp` 객체로 표현되는데 다음과 같이 `sf` 객체로 전환할 수 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(st_as_sf(chicago), n = 5)\n# Simple feature collection with 620 features and 4 fields\n# Geometry type: GEOMETRY\n# Dimension:     XY\n# Bounding box:  xmin: 0.389 ymin: 153 xmax: 1280 ymax: 1280\n# CRS:           NA\n# First 5 features:\n#     label seg tp marks                           geom\n# 1  window  NA NA  <NA> POLYGON ((0.389 153, 1282 1...\n# 2 segment  NA NA  <NA> LINESTRING (0.389 1254, 110...\n# 3 segment  NA NA  <NA> LINESTRING (110 1252, 111 1...\n# 4 segment  NA NA  <NA> LINESTRING (110 1252, 198 1...\n# 5 segment  NA NA  <NA> LINESTRING (198 1277, 198 1...\n```\n:::\n\n\n여기서는 첫 다섯 개 피처만 나타나 있어 금방 알아챌 수는 없지만, `label` 변수를 통해 알 수 있듯이 포인트들도 이 객체에 포함되어 있다.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(st_as_sf(chicago)$label)\n# \n#   point segment  window \n#     116     503       1\n```\n:::\n\n\n네트워크의 *구조*에 대한 정보(역자주: 네트워크 연결성에 대한 위상 정보), 즉 LINESTRING 지오메트리가 어떻게 연결되어 있는지는 `sf` 객체에 포함되어 있지 않다. 이런 측면에서 **sfnetworks** 패키지(van der Meer et al. 2022)는 좋은 대안일 수 있는데, 네트워크 위상 정보를 다룰 수 있을 뿐만 아니라 OpenStreetMaps에서 가져온 네트워크 데이터를 **spatstat** 패키지로 전달할 수도 있다.\n\n## 공간 샘플링과 포인트 프로세스를 시뮬레이션하기\n\n**sf** 패키지에는 MULTIPOINT, 선형 또는 폴리곤 지오메트리에서 포인트를 샘플링하는 `st_sample` 메소드가 포함되어 있으며, 다양한 공간 샘플링 전략을 사용한다. 이 메소드는 기본적으로 “random”, “hexagonal”, “Fibonacci”(11.5절), 및 “regular” 옵션을 지원하는데, 여기서 “regular”는 정사각형 격자에서 샘플링하는 것을 의미하고 “hexagonal”은 본질적으로 삼각형 격자를 제공한다. “random” 유형만 요청된 포인트의 수를 정확히 반환하고, 다른 유형에서는 근사값만을 반환한다.\n\n`st_sample` 함수는 **spatstat** 패키지의 포인트 프로세스 시뮬레이션 함수와도 인터페이스를 제공하는데, 샘플링 유형에 대해 다른 값을 선택하는 경우가 해당된다. 예를 들어, `type = Thomas`로 설정하면 **spatstat** 함수 `rThomas`가 호출된다(그림 11.5).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkappa <- 30 / st_area(w2) # intensity\nth <- st_sample(w2, kappa = kappa, mu = 3, scale = 0.05, \n    type = \"Thomas\")\nnrow(th)\n# [1] 90\n```\n:::\n\n\n![mu =3, scale = 0.05로 설정한 Thomas 프로세스](https://r-spatial.org/book/11-PointPattern_files/figure-html/fig-rThomas-1.png){#fig-11-5}\n\n`?rThomas`를 실행하며 파라미터 `kappa`, `mu`, 및 `scale`의 의미에 대한 자세한 설명을 얻을 수 있다. 포인트 프로세스 시뮬레이션을 수행할 때는 샘플 크기가 아닌 강도가 주어진다. 이 방법으로 얻어진 관측 윈도우 내의 샘플 크기는 하나의 확률 변수가 된다.\n\n## 구체 상의 포인트를 시뮬레이션하기\n\n`sf`에서 기본적으로 지원하는 또 다른 공간 무작위 샘플링 유형은 구면에서의 무작위 포인트 시뮬레이션이다. 그림 11.6에 한 예시가 나타나 있으며, 포인트들이 모두 해양에만 존재한다. 구면에 규칙적 포인트 패턴을 시뮬레이션 하려면 `st_sample` 함수에서 아규먼트로 `type = \"Fibonacci\"`로 지정하면 된다(González 2010).\n\n![구체의 해양부에 한정된 샘플 포인트: 무작위 패턴(왼쪽)과 규칙 패턴(오른쪽)이 정사 도법의 지도 상에 나타나 있다.](https://r-spatial.org/book/11-PointPattern_files/figure-html/fig-srsglobe-1.png){#fig-11-6}\n\n## 연습문제\n\n1.  **spatstat** 패키지에서 `plot(longleaf)`로 얻은 플롯과 동일한 것을 `ggplot2` 패키지의 `geom_sf()` 함수와 `sf::plot()`을 사용하여 생성하라.\n\n2.  12장에서 사용된 NO$_2$ 데이터의 샘플 위치를 적절한 관측 윈도우와 함께 `ppp` 객체로 전환하라.\n\n3.  NO$_2$ 데이터셋을 가지고 밀도를 계산하고 밀도면을 플롯하라. 밀도면을 `stars` 객체로 전환하고, 표면 하부 체적을 계산하라.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}