{
  "hash": "843298b09821a0ff6d713464df5563be",
  "result": {
    "engine": "knitr",
    "markdown": "---\ndate-modified: last-modified\nnumber-sections: true\nformat: \n  html: \n    toc: true\ncode-link: true\ncode-copy: true\nexecute: \n  warning: false\n  error: false\n  freeze: auto\neditor: visual\n---\n\n\n# 데이터 큐브 {#sec-datacube}\n\n데이터 큐브는 시간에 걸쳐 일련의 지오메트리의 특성을 반복적으로 관찰할 때 자연스럽게 발생한다. 시간 정보는 때때로 건물의 건축 연도나 사람의 생년월일을 등록할 때와 같이 피처의 속성으로 간주될 수 있다(5장). 다른 경우에는 속성을 관찰하는 시간이나 속성에 대한 예측이 이루어진 시점을 나타낼 수 있다. 이러한 경우, 시간은 공간과 동등한 위상을 가지며, 시간과 공간은 함께 우리가 관찰, 모델링, 예측 또는 예보하는 물리적 차원을 설정한다.\n\n우리 세상을 바라보는 한 가지 방법은 세 가지 공간 차원과 하나의 시간 차원을 포함하는 네 차원 공간을 상정하는 것이다. 그런 관점에서 사건은 시간 차원에서의 크기를 지속 시간으로 갖는 “사물”이나 “객체”가 된다(Galton 2004). 이러한 관점은 우리가 세상을 경험하고 묘사하는 방식과 잘 맞지 않지만, 데이터 분석의 관점에서는 네 개의 숫자(와 참조 체계) 만으로 관측의 시공간 좌표를 설명하는 데 충분하다.\n\n우리는 데이터 큐브를 공간 및/또는 시간과 관련된 하나 이상의 배열 차원을 가진 배열 데이터로 정의한다(Lu, Appel, and Pebesma 2018). 이는 래스터 데이터, 속성을 가진 피처, 그리고 시계열 데이터가 모두 데이터 큐브의 특별한 경우임을 의미한다. 우리는 3차원 구조에 한정될 이유가 없으므로 실제로는 큐브보다는 *하이퍼큐브*(hypercube)를 의미하며, 서로 다른 차원의 큐브 범위가 동일할 필요는 없고 비교 가능한 단위를 가질 필요도 없기 때문에 더 적절한 용어는 *하이퍼-직사각형*(hyper-retangle)이 될 것이다. 간편하게 우리는 데이터 큐브라고 부른다.\n\n데이터 큐브의 표준 형식은 그림 6.1에 나타나 있으며, 이는 서로 다른 시간 단계에서 수집(관찰 또는 모델링)된 동일한 지역의 래스터 레이어 세트를 원근법 플롯으로 보여준다. 세 개의 큐브 차원인 경도, 위도, 시간은 서로 직교 관계를 이룬다. 임의의 2차원 큐브 슬라이스는 특정 값에서 하나의 차원을 고정함으로써 얻어지고, 1차원 슬라이스는 특정 값에서 두 개의 차원을 고정하여 얻어지며, 스칼라는 세 개의 차원을 특정 값에서 고정함으로써 얻어진다.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![위도, 경도, 시간의 세 차원을 가지 래스터 데이터 큐브](06_files/figure-html/fig-6-1-1.png){#fig-6-1 width=672}\n:::\n:::\n\n\n## 4차원 데이터 큐브\n\n\n::: {.cell}\n\n:::\n\n\n![x, y, 밴드, 시간의 네 차원을 가진 4차원 래스터 데이터 큐브](https://r-spatial.org/book/06-Cubes_files/figure-html/fig-cube4d-1.png){#fig-6-2}\n\n그림 6.2는 4차원 래스터 데이터 큐브를 보여준다(Appel and Pebesma 2019). 여기서 스펙트럼 차원(“밴드”)을 가진 3차원 래스터 데이터 큐브가 네 번째 차원인 시간 축을 따라 조직된다. 컬러 이미지 데이터는 항상 세 개의 밴드(파란색, 녹색, 빨간색)를 가지며, 이 예제는 스펙트럼 원격탐사 데이터에서 일반적으로 발견되는 네 번째 밴드(근적외선, NIR)를 포함하고 있다.\n\n그림 6.3은 정확히 동일한 데이터를 보여주지만, 평면적으로 배열한 패싯 플롯(또는 산점도 행렬)으로 나타내고 있다. 플롯의 두 차원($x$ 및 $y$)은 기본적으로는 *밴드*와 *시간* 차원을 의미하지만, 세부 플롯 내부에서는 실제 좌표계를 의미한다.\n\n\n::: {.cell}\n\n:::\n\n\n![두 차원에 의거해 평면적으로 배열된 4차원 래스터 데이터](https://r-spatial.org/book/06-Cubes_files/figure-html/fig-cube4d2-1.png){#fig-6-3}\n\n## 차원, 속성, 서포트\n\n$$\nZ=f(x,y,t)\n$$\n\n$$\n\\{Z_1,Z_2,...,Z_p\\}=f(x,y,t)\n$$\n\n$$\n\\{Z_1,Z_2,...,Z_p\\}=f(D_1,D_2,...,D_n)\n$$\n\n### 정규 차원, GDAL'의 지오트랜스폼\n\n$$\nx=o_x+(i-1)d_x\n$$\n\n$$\nx=o_x+(i-a)d_x+(j-1)a_1\n$$\n\n$$\ny=o_y+(i-1)a_2+(j-1)d_y\n$$\n\n### 큐브 차원과 서포트\n\n## 데이터 큐브에 작용하는 오퍼레이션\n\n### 큐브를 잘게 쪼개기: 필터\n\n### 차원에 함수를 적용하기\n\n### 차원을 줄이기\n\n## 래스터 큐브를 벡터 큐브로 애그리게이팅하기\n\n## 차원을 속성으로 교체하기\n\n$$\n\\{Z_1,Z_2,...,Z_p\\}=f(D_1,D_2,...,D_n)\n$$\n\n$$\nZ=f(D_1,D_2,...,D_n,D_{n+1})\n$$\n\n## 기타 동적 공간데이터\n\n## 연습문제\n",
    "supporting": [
      "06_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}