---
date-modified: last-modified
number-sections: true
format: 
  html: 
    toc: true
code-link: true
code-copy: true
execute: 
  warning: false
  error: false
  freeze: auto
editor: visual
---

# 공간적 인터폴레이션 {#sec-interpolation}

공간적 인터폴레이션은 관측된 위치 정보를 바탕으로, 관측되지 않은 공간 위치에서 공간적으로 연속적인 변수(필드)의 값을 추정하는 과정이다. 이를 위한 통계적 방법론을 지구통계학(geostatistics)이라 하며, 공간적으로 연속적인 현상의 모델링, 예측, 그리고 시뮬레이션에 중점을 둔다. 공간적 인터폴레이션의 전형적인 적용 사례는 결측값 문제이다. 즉, 연구 대상 지역에서 한정된 샘플 위치 $s_i,i=1,...,n$ 에서만 특정 현상의 속성 $Z(s)$가 관측되었을 때, 이를 바탕으로 해당 연구 내 모든 위치 $s_0$에서의 속성값을 추정하는 것이다. 관측되지 않은 위치에 대해 속성값을 예측하는 이러한 과정을 크리깅(kriging) 또는 가우시안 프로세스 예측(Gaussian Process prediction)이라고도 부른다. 만일 $Z(s)$에 화이트 노이즈 성분인 $\epsilon$이 포함되어 있다면, 이를 $Z(s)=S(s)+\epsilon$ (측정 오차 포함) 형태로 나타낼 수 있다. 이 경우, $Z(s)$ 자체가 아니라 오차가 제거된 $S(s)$를 예측하거나 시뮬레이션하는 것이 대안적인 목표가 될 수 있다. 이러한 과정을 보통 *공간 필터링*(spatial filtering) 또는 *평활화*(smoothing)라고 부른다.

이 장에서는 지구통계학적 데이터를 다루는 간단한 접근법, 기초적인 인터폴레이션 기법, 그리고 공간적 자기상관, 공간 예측 및 시뮬레이션 모델링을 다룬다. 13장에서는 다변량 및 시공간 지구통계학적 모델과 같이 보다 복잡한 모델에 중점을 둔다. 주요 도구로는 **gstat** 패키지(Pebesma and Graeler 2022; Pebesma 2004)를 사용하며, 이 패키지는 다양한 비베이지안 지구통계 분석 모델과 옵션을 제공한다. R로 구현된 베이지안 방법은 Diggle, Tawn, and Moyeed (1998), Diggle and Ribeiro Jr. (2007), Blangiardo and Cameletti (2015), Wikle, Zammit-Mangion, and Cressie (2019)에서 확인할 수 있다. 대용량 데이터셋 분석에 활용되는 기법의 개요와 비교는 Heaton et al. (2018)에 제시되어 있다.

## 첫 번째 데이터셋

**gstat** 패키지에 포함된 평균 NO₂ 데이터셋을 불러온다. 이 데이터셋은 13장에서 준비된 것이다.

```{r}
#| eval: false
library(tidyverse) |> suppressPackageStartupMessages()
no2 <- read_csv(system.file("external/no2.csv", 
    package = "gstat"), show_col_types = FALSE)
```

이 데이터셋에 UTM 투영을 적용한 뒤, 이를 `sf` 객체로 변환한다.

```{r}
#| eval: false
library(sf)
# Linking to GEOS 3.11.1, GDAL 3.6.4, PROJ 9.1.1; sf_use_s2() is TRUE
crs <- st_crs("EPSG:32632")
st_as_sf(no2, crs = "OGC:CRS84", coords = 
    c("station_longitude_deg", "station_latitude_deg")) |>
    st_transform(crs) -> no2.sf
```

그다음, 국가 행정 경계를 불러오고, **ggplot2** 패키지를 사용해 지도를 작성한다(그림 12.1).

```{r}
#| eval: false
read_sf("data/de_nuts1.gpkg") |> st_transform(crs) -> de
```

![독일의 농촌 지역 관측소들에 높은 평균 NO$_2$ 값이 집중해 있다.](https://r-spatial.org/book/12-Interpolation_files/figure-html/fig-plotDE-1.png){#fig-12-1}

이 데이터를 바탕으로 공간적 인터폴레이션을 수행하려면, 먼저 예측을 수행할 위치를 결정해야 한다. 일반적으로는 연구 대상 지역 전체를 덮는 규칙 그리드를 사용한다. 객체 `de`의 국가 윤곽에 맞추어, 독일 전역을 커버하는 10 km × 10 km의 규칙적 그리드를 생성한다. 그리드 셀의 크기를 지난치게 세밀하게 설정하지 않은 것은, 플롯에서 결과를 눈으로 확인하기 위함이다.

```{r}
#| eval: false
library(stars) |> suppressPackageStartupMessages()
st_bbox(de) |>
  st_as_stars(dx = 10000) |>
  st_crop(de) -> grd
grd
# stars object with 2 dimensions and 1 attribute
# attribute(s):
#         Min. 1st Qu. Median Mean 3rd Qu. Max. NA's
# values     0       0      0    0       0    0 2076
# dimension(s):
#   from to  offset  delta            refsys x/y
# x    1 65  280741  10000 WGS 84 / UTM z... [x]
# y    1 87 6101239 -10000 WGS 84 / UTM z... [y]
```

가장 단순한 공간적 인터폴레이션 기법 중 하나는 역거리 가중법(inverse distance weighted)이다. 이 방법은 예측 지점으로부터의 거리의 역비례하는 가중치를 부여하여 가중 평균을 계산한다.

$$
\hat{z}(s_0)=\frac{\sum^n_{i=1} w_iz(s_i)}{\sum^n_{i=1}w_i}
$$

여기서 가중치는 $w_i=|s_0-s_i|^{-p}$로 주어지며, 지수($p$)는 일반적으로 2를 사용하지만 교차검증을 통해 최적값을 찾을 수도 있다. **gstat** 패키지의 `idw()` 함수를 사용하면 역거리 가중 인터폴레이션을 쉽게 수행할 수 있다.

```{r}
#| eval: false
library(gstat)
i <- idw(NO2~1, no2.sf, grd)
# [inverse distance weighted interpolation]
```

그 결과는 그림 12.2에 나타나 있다.

![독일 NO$_2$ 집중도에 대한 역거리 가중 인터폴레이션의 결과](https://r-spatial.org/book/12-Interpolation_files/figure-html/fig-idw-1.png){#fig-12-2}

## 샘플 베리오그램

지구통계학적 방법으로 공간 예측을 수행하려면 먼저 평균과 공간적 자기상관을 설명할 수 있는 모델을 설정해야 한다. 가장 단순한 모델은 $Z(s)=m+e(s)$로, 여기서 $m$은 알려지지 않은 상수 평균값이며, 공간적 자기상관은 $\gamma (h)=0.5E(Z(s)-Z(s+h))^2$ 형태의 베리오그램(variogram)으로 표현된다. 유한한 분산 $C(0)$를 가지는 경우에는 $\gamma (h)=C(0)-C(h)$가 성립하며, 이를 통해 베리오그램이 코베리오그램(covariogram) 또는 공분산 함수와 밀접하게 연결되어 있음을 알 수 있다.

샘플 베리오그램은 거리 구간 $h_i=[h_{i,0},h_{i,1}]$별 $\gamma(h)$으의 추정값을 계산하여 얻는다.

$$
\hat{\gamma}(h_i)=\frac{1}{2N(h_i)}\sum^{N(h_i)}_{j=1}(z(s_i)-z(s_i+h'))^2,\quad h_{i,0}\le h' \lt h_{i,1}
$$

여기에서 $N(h_i)$는 거리 구간 $h_i$에 속하는 모든 샘플 쌍의 개수를 의미한다(역자주: 즉, 샘플 쌍 간의 거리가 해당 구간 내에 포함되는 경우의 개수를 의미한다). **gstat** 패키지의 `variogram()` 함수를 사용하면 이러한 샘플 베리오그램을 계산할 수 있다.

```{r}
#| eval: false
v <- variogram(NO2~1, no2.sf)
```

그림 12.3은 계산된 베리오그램 결과를 플롯으로 나타낸 것이다.

![샘플 베리오그램 플롯](https://r-spatial.org/book/12-Interpolation_files/figure-html/fig-vgm-1.png){#fig-12-3}

`variogram()` 함수는 기본적으로 최대 거리(`cutoff`)를 바운딩 박스의 대각선 길이의 1/3로, 구간 너비(`width`)를 `cutoff`를 15로 나눈 값으로 설정한다. 이러한 기본값은 다음과 같이 변경할 수 있다.

```{r}
#| eval: false
v0 <- variogram(NO2~1, no2.sf, cutoff = 100000, width = 10000)
```

변경된 설정값을 적용한 결과는 그림 12.4에 나타나 있다.

![변경된 설정값을 적용하여 생성한 샘플 베리오그램](https://r-spatial.org/book/12-Interpolation_files/figure-html/fig-vgm2-1.png){#fig-12-4}

공식 `NO₂~1`은 데이터 파일(NO₂)에서 관심 변수를 선택하고 평균 모델을 지정하는 데 사용된다. 여기서 `~1`은 절편만 포함된(알려지지 않은 상수 평균을 가정하는) 모델을 의미한다.

## 베리오그램 모델 적합

공간 예측을 수행하려면, 앞에서 도출한 거리 구간별 추정값이 아니라 이론적으로 모든 거리 $h$에 적용할 수 있는 베리오그램 *모델* $\gamma(h)$가 필요하다. 구간별 추정값을 단순히 직선으로 연결하거나 각 구간에서 일정한 값이라고 가정하면 문제가 발생한다. 이는 비양수 정의 공분산 행렬(non-positive definite covariance matrices)을 전제하게 되며, 이러한 행렬을 기반으로 한 통계 모델은 예측에 사용할 수 없다(역자주: 샘플 베리오그램의 구간별 평균값(위의 그림 12.3과 12.4의 포인트들)을 단순히 직선으로 연결하거나 각 구간에서 일정한 값으로 고정하면, 이를 바탕으로 계산된 공분산 행렬이 양의 정부호(positive definite) 조건이라는 수학적 제약을 만족하지 못할 수 있다. 따라서 다음에 나오는 내용처럼, 관측값만 반영한 비모수적 연결 대신 반드시 이론적으로 타당한 형태를 가진 파라메트릭 베리오그램 모델을 적합해야 한다.)

이 문제를 피하기 위해, 파라메트릭 형태의 $\gamma (h)$를 적합하여 추정값 $\hat{\gamma} (h)$를 구한다. 여기서 $\hat{\gamma} (h)$는 $\gamma (h)$를 추정하는 데 사용된 모든 $h'$ 값의 평균값으로 설정된다. 예를 들어, 다음과 같은 지수형 베리오그램 모델을 적합할 수 있다.

```{r}
#| eval: false
v.m <- fit.variogram(v, vgm(1, "Exp", 50000, 1))
```

결과는 그림 12.5에 제시되어 있다.

![샘플 베리오그램(가운데가 비어 있는 점) 위에, 가중 최소제곱법(실선) 및 최대우도추정법(점선)으로 적합한 모델이 함께 표시되어 있다.](https://r-spatial.org/book/12-Interpolation_files/figure-html/fig-fitvariogrammodel-1.png){#fig-12-5}

선의 적합에는 다음 식을 최소화하는 가중 최소제곱법이 적용되었다.

$$
\sum^n_{i=1}w_i(\gamma (h_i)-\hat{\gamma}(h_i))^2,
$$

여기에서 가중치의 기본값은 $N(h_i)/h^2$로 주어지며, `fit.method` 아규먼트를 통해 다른 가중치 옵션을 선택할 수 있다.

가중 최소제곱법 적합의 대안으로 최대우도(ML) 또는 제한 최대우도(parameter estimation) 모수 추정법(Kitanidis and Lane 1985)을 사용할 수 있다. 이 사례에서는 그림 12.5에서 점선으로 나타난 것처럼, 비교적 유사한 적합 모델이 도출되었다. ML 접근법의 장점은 식 12.1에서 거리 구간 $h_i$나 식 12.2에서 가중치 $w_i$를 선택할 필요가 없다는 것이다. 반면, 단점은 데이터가 다변량 정규분포를 따른다는 강한 가정을 전제로 하며, 대규모 데이터셋의 경우 관측 수에 해당하는 크기의 선형 시스템을 반복적으로 풀어야 한다는 점이다. Heaton et al. (2018)은 대규모 데이터셋에 모델을 적합하는 데 특화된 접근법을 비교한다.

## 크리깅 인터폴레이션

일반적으로 인터폴레이션은 연구 대상 지역을 덮는 규칙 그리드 지점들을 대상으로 수행된다. 먼저, 해당 지역을 포함하되 외부 영역은 `NA`로 채워진 래스터(`stars` 객체)를 생성한다.

크리깅은 연구 대상 지역 내 임의 지점 $Z(s_0)$의 속성값을 예측하는 방법이다. **gstat** 패키지의 `krige()` 함수를 사용하면 NO₂ 값을 크리깅할 수 있으며, 이때 경향면 모델, 데이터, 예측 그리드, 베리오그램 모델을 아규먼트로 함께 전달한다(그림 12.6).

```{r}
#| eval: false
k <- krige(NO2~1, no2.sf, grd, v.m)
# [using ordinary kriging]
```

```{r}
#| eval: false
ggplot() + geom_stars(data = k, aes(fill = var1.pred, x = x, y = y)) + 
    xlab(NULL) + ylab(NULL) +
    geom_sf(data = st_cast(de, "MULTILINESTRING")) + 
    geom_sf(data = no2.sf) +
    coord_sf(lims_method = "geometry_bbox")
```

![독일의 NO$_2$ 농도 크리깅의 결과](https://r-spatial.org/book/12-Interpolation_files/figure-html/fig-krigeovergermany-1.png){#fig-12-6}

## 에어리어 평균: 블록 크리깅

에어리어 평균을 계산하는 방법에는 여러 가지가 있다. 그중 가장 간단한 방법은 대상 폴리곤 내부에 포함된 포인트 샘플들의 값을 평균하는것이다.

```{r}
#| eval: false
a <- aggregate(no2.sf["NO2"], by = de, FUN = mean)
```

더 복잡한 방법으로는 블록 크리깅(block kriging, Journel and Huijbregts 1978)이 있으며, 이는 타깃 에어리어의 평균값을 추정하기 위해 모든 데이터를 활용한다. `krige()` 함수의 `newdata` 아규먼트에 타깃 에어리어(폴리곤)을 전달하면 된다.

```{r}
#| eval: false
b <- krige(NO2~1, no2.sf, de, v.m)
# [using ordinary kriging]
```

두 지도를 하나의 객체로 병합해 단일 플롯으로 표현한다(그림 12.7).

```{r}
#| eval: false
b$sample <- a$NO2
b$kriging <- b$var1.pred
```

```{r}
#| eval: false
b |> select(sample, kriging) |> 
        pivot_longer(1:2, names_to = "var", values_to = "NO2") -> b2
b2$var <- factor(b2$var, levels = c("sample", "kriging"))
ggplot() + geom_sf(data = b2, mapping = aes(fill = NO2)) + facet_wrap(~var) +
     scale_fill_gradientn(colors = sf.colors(20))
```

![단순 평균 계산법(왼쪽)과 블록 크리깅(오른쪽)을 통해 계산한 NO$_2$ 농도 집계값](https://r-spatial.org/book/12-Interpolation_files/figure-html/fig-aggregations-1.png){#fig-12-7}

패턴은 유사하지만, 단순 평균을 통한 샘플 평균이 블록 크리깅 결과보다 변동성이 더 크다. 이는 크리깅에서 집계 영역 외부의 데이터 포인트에도 가중치를 부여되기 때문에 발생하는 평활화 효과 때문일 수 있다.

표준 오차의 대략적인 추정치는 $\sqrt{(\sigma^2 /n)}$으로 계산할 수 있다.

```{r}
#| eval: false
SE <- function(x) sqrt(var(x)/length(x))
a <- aggregate(no2.sf["NO2"], de, SE)
```

샘플이 공간적으로 무작위 표본 추출을 통해 얻어진 경우, 디자인 기반 추론(10.4절)에서 실제 추정치는 위와 같았을 것이다. 블록 크리깅 분산은 모델 기반 추정치이며, 크리깅의 부산물로 계산된다. 그림 12.8에서 두 값을 비교하면, 단순 평균 접근법이 블록 크리깅에 비해 구역 평균의 예측 오차에서 변동성이 더 클 뿐 아니라, 그 값 자체도 더 크다는 것을 확인할 수 있다.

![단순 평균 계산법(왼쪽)과 블록 크리깅(오른쪽)을 통해 산출한 평균 NO$_2$ 농도의 표준 오차](https://r-spatial.org/book/12-Interpolation_files/figure-html/fig-aggrSE-1.png){#fig-12-8}

## 조건부 시뮬레이션

필드 $Z(s)$의 조건부 평균이 아니라, 하나 또는 여러 개의 조건부 실현이 필요한 경우, 조건부 시뮬레이션을 활용한다.(역자주: '조건부 실현'이란, 이미 관측된 자료를 조건으로 하여 공간 필드 $Z(s)$의 가능한 한 가지 구체적인 분포 패턴을 생성한 결과를 의미한다. 반면 '조건부 시뮬레이션'은 이러한 조건부 실현을 여러 번 생성하는 과정을 말한다. 조건부 평균이 하나의 “가장 그럴듯한” 값만 제공하는 데 비해, 조건부 시뮬레이션은 불확실성을 반영한 다양한 가능성을 탐색할 수 있다는 장점이 있다. 이를 통해 단순 평균값 예측만으로는 얻기 어려운 확률적 특성이나 극단값 발생 가능성 등을 평가할 수 있다.) 이러한 조건부 실현이 필요한 상황은, 비선형 함수 $g(\cdot)$을 통해 $Z(s)$의 구역 평균 값 $g(Z(s))$를 추정해야 하는 경우에 해당된다. 간단한 예로는 $Z(s)$가 특정 임계값을 초과하는 지역이 존재하는지를 평가하는 경우를 들 수 있다.

**gstat** 패키지의 기본 접근법은 이를 위해 순차(sequential) 시뮬레이션 알고리즘을 사용한다. 이 알고리즘은 예측 대상 위치들을 무작위로 순회하며, 각 위치에서 다음 단계를 수행한다.

-   해당 위치에서 크리깅 예측을 수행한다.

-   크리깅 분산과 동일한 평균과 분산을 갖는 정규분포로부터 난수를 생성한다.

-   이 값을 조건부 데이터셋에 추가한다.

-   새로운 무작위 시뮬레이션 위치를 찾는다.

위 과정을 모든 위치에 대해 반복한다.

**gstat** 패키지의 `krige()` 함수가 이를 수행하며, `nsim` 아규먼트를 양수로 설정하면 조건부 시뮬레이션이 실행된다. `set.seed()`를 설정한 것은 시뮬레이션 결과가 실행될 때마다 달라지지 않도록, 즉 재현 가능성을 확보하기 위함이다.

```{r}
#| eval: false
set.seed(13341)
(s <- krige(NO2~1, no2.sf, grd, v.m, nmax = 30, nsim = 6))
# drawing 6 GLS realisations of beta...
# [using conditional Gaussian simulation]
# stars object with 3 dimensions and 1 attribute
# attribute(s):
#       Min. 1st Qu. Median Mean 3rd Qu. Max.  NA's
# var1  -5.7    6.12   8.68 8.88    11.5 23.9 12456
# dimension(s):
#        from to  offset  delta            refsys        values x/y
# x         1 65  280741  10000 WGS 84 / UTM z...          NULL [x]
# y         1 87 6101239 -10000 WGS 84 / UTM z...          NULL [y]
# sample    1  6      NA     NA                NA sim1,...,sim6
```

크리깅 추정 시 포함할 최근접 이웃의 최대 개수는 `nmax` 아규먼트를 통해 제한할 수 있다. 이는 단계가 진행됨에 따라 조건부 데이터셋이 계속 증가하면서 계산 시간이 길어지고 메모리 사용량이 커지기 문제를 방지하기 위함이다. 조건부 시뮬레이션 결과가 그림 12.9에 나타나 있다.

![NO$_2$ 농도에 대한 여섯 가지 조건부 시뮬레이션 결과](https://r-spatial.org/book/12-Interpolation_files/figure-html/fig-plotkrigingvalues-1.png){#fig-12-9}

**gstat** 패키지에는 최근 조건부 시뮬레이션의 대안 기법이 추가되었으며, 원형 임베딩(circular embedding) 기법을 구현한 함수 `krigeSimCE()`(Davies와 Bryant, 2013)와 터닝 밴드(turning band) 기법을 구현한 함수 `krigeSTSimTB()`(Schlather, 2011)가 있다. 이러한 기법들은 대규모 데이터셋이나 시공간 데이터셋의 조건부 시뮬레이션에 특히 유용하다.

## 경향 모델

이 장에서 사용된 크리깅과 조건부 시뮬레이션은 모든 공간 변동성이 공간 공분산 모델로 특징지어지는 무작위 과정이라고 가정한다. 그러나 타깃 변수와 의미 있게 상관된 다른 변수가 있는 경우, 이러한 변수를 경향 모델(trend model)을 위한 선형 회귀 모델에 포함될 수 있다.(여기서 '경향 모델'은 공간데이터의 평균 구조를 설명하는 회귀 기반 모델을 의미한다. 즉, 타깃 변수와 상관된 하나 이상의 보조 변수를 설명변수로 포함하여 기대값을 추정하고, 잔차에 대해 공간적 자기상관 구조를 모델화한다. 이는 공간적 인터폴레이션 기법인 경향면 분석(trend surface analysis)과는 다른 개념이다.)

$$
Z(s)=\sum^p_{j=0} \beta_jX_j(s)+e(s)
$$

여기서 $X_0(s)=1$, $\beta_0$는 절편, $\beta_j$는 각 변수에 대한 회귀계수이다. 변수를 추가하면 일반적으로 잔차 $e(s)$의 공간적 자기상관과 분산이 모두 감소하여, 더 정확한 예측과 유사한 조건부 시뮬레이션 결과를 얻을 수 있다. NO$_2$의 변동에 대한 설명 변수로 인구 밀도 변수를 사용하는 예를 살펴본다.

### 인구 밀도 그리드

대기 중 NO$_2$의 예측 변수로 인구 밀도를 사용한다. NO$_2$는 주로 교통에서 발생하며, 교통량은 인구 밀도가 높은 지역에서 더 집중된다. 인구 밀도 데이터는 2011년 인구 조사에서 얻어진 것으로, 100m × 100m 그리드 셀당 거주자 수가 CSV 파일에 포함되어 있다. 이 데이터를 타깃 그리드 셀에 맞춰 합산하여 새로운 집계 데이터를 생성할 수 있다.

```{r}
#| eval: false
v <- vroom::vroom("aq/pop/Zensus_Bevoelkerung_100m-Gitter.csv")
v |> filter(Einwohner > 0) |> 
    select(-Gitter_ID_100m) |>
    st_as_sf(coords = c("x_mp_100m", "y_mp_100m"), crs = 3035) |>
    st_transform(st_crs(grd)) -> b
a <- aggregate(b, st_as_sf(grd, na.rm = FALSE), sum)
```

위의 코드를 통해 집계된 타깃 그리드 셀의 인구 수가 `a`에 저장된다. 인구 밀도를 계산하려면 각 셀의 면적이 필요한데, 국경과 겹치는 셀의 경우 면적이 10km × 10km보다 작을 수 있다.

```{r}
#| eval: false
grd$ID <- 1:prod(dim(grd)) # to identify grid cells
ii <- st_intersects(grd["ID"],
  st_cast(st_union(de), "MULTILINESTRING"), as_points = FALSE)
grd_sf <- st_as_sf(grd["ID"], na.rm = FALSE)[lengths(ii) > 0,]
st_agr(grd_sf) = "identity"
iii <- st_intersection(grd_sf, st_union(de))
grd$area <- st_area(grd)[[1]] + 
    units::set_units(grd$values, m^2)
grd$area[iii$ID] <- st_area(iii)
```

위의 두 단계 과정(먼저 국경에 걸친 셀을 찾은 뒤 면적을 계산하는 과정)을 거치지 않고, 모든 셀에 바로 `st_intersection()` 함수를 적용하는 방법도 있다. 그러나 이 방법은 오퍼레이션 시간이 오래 걸린다는 단점이 있다. 인구 수와 면적을 이용해 인구 밀도를 계산하고(그림 12.10), 총계가 맞는지 확인해 본다.

```{r}
#| eval: false
grd$pop_dens <- a$Einwohner / grd$area
sum(grd$pop_dens * grd$area, na.rm = TRUE) # verify
# 80323301 [1]
sum(b$Einwohner)
# [1] 80324282
```

두 값이 상당히 잘 일치하는 것을 확인할 수 있다. `st_interpolate_aw()` 함수를 사용했다면, 완전히 동일한 결과를 얻었을 것이다. 인구 수를 인구 밀도로 변환하려면 해당 인구 수를 100m × 100m 그리드 셀의 면적으로 나누어야 한다.

![100m x 100m 그리드 셀별 인구 밀도](https://r-spatial.org/book/12-Interpolation_files/figure-html/fig-popdens-1.png){#fig-12-10}

대기질 관측소가 위치한 지점의 인구 밀도 값을 추출하기 위해 `st_extract()` 함수를 사용한다.

```{r}
#| eval: false
grd |>
  select("pop_dens") |>
  st_extract(no2.sf) |>
  pull("pop_dens") |> 
  mutate(no2.sf, pop_dens = _) -> no2.sf
```

그런 다음, 관측소 위치에서 NO$_2$와 인구 밀도 사이의 선형 관계를 살펴볼 수 있다.

```{r}
#| eval: false
summary(lm(NO2~sqrt(pop_dens), no2.sf))
# 
# Call:
# lm(formula = NO2 ~ sqrt(pop_dens), data = no2.sf)
# 
# Residuals:
#    Min     1Q Median     3Q    Max 
# -7.990 -2.052 -0.505  1.610  8.095 
# 
# Coefficients:
#                Estimate Std. Error t value Pr(>|t|)    
# (Intercept)       4.537      0.685    6.62  5.5e-09 ***
# sqrt(pop_dens)  326.154     49.366    6.61  5.8e-09 ***
# ---
# Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1
# 
# Residual standard error: 3.13 on 72 degrees of freedom
# Multiple R-squared:  0.377,   Adjusted R-squared:  0.369 
# F-statistic: 43.7 on 1 and 72 DF,  p-value: 5.82e-09
```

두 변수 간의 선형 관계는 그림 12.11의 산점도에서 확인할 수 있다.

![2017년 농촌 지역 대기질 관측소의 연평균 NO$_2$ 농도와 인구 밀도의 산점도](https://r-spatial.org/book/12-Interpolation_files/figure-html/fig-no2scat-1.png){#fig-12-11}

이 새로운 모델을 사용해 예측을 수행하려면, 먼저 잔차 베리오그램을 모델링해야 한다(그림 12.12).

```{r}
#| eval: false
no2.sf <- no2.sf[!is.na(no2.sf$pop_dens),]
vr <- variogram(NO2~sqrt(pop_dens), no2.sf)
vr.m <- fit.variogram(vr, vgm(1, "Exp", 50000, 1))
```

![인구 밀도 경향을 제거한 후 잔차에 대해 계산한 베리오그램](https://r-spatial.org/book/12-Interpolation_files/figure-html/fig-predictusingpopulationdensity-1.png){#fig-12.12}

그리고 나서 아래의 코드를 사용해 크리깅 예측을 수행한다. 이 때 중요한 점은, 예측 대상 위치에 대해서도 `pop_dens` 값이 계산되어 새로 생성되는 객체 `grd`에 포함된다는 것이다. 예측 결과는 그림 12.13에 나타나 있다.

```{r}
#| eval: false
kr <- krige(NO2 ~ sqrt(pop_dens), no2.sf, 
            grd["pop_dens"], vr.m)
# [using universal kriging]
```

![인구 밀도를 경향 변수로 활용한 크리깅 기반 NO$_2$ 농도 예측값](https://r-spatial.org/book/12-Interpolation_files/figure-html/fig-residualkriging-1.png){#fig-12-13}

(오디너리) 크리깅과 비교하면 몇 가지 뚜렷한 차이가 나타난다. 인구 밀도를 경향 변수로 사용한 크리깅 결과 지도는 측정소의 극단적인 값보다는 인구 밀도의 극단적인 값을 따르는 경향을 보이며, 값의 범위도 오디너리 크리깅보다 넓다. 그러나 사용된 측정소가 모두 "농촌 배경" 범주에 속해 전반적으로 인구 밀도가 낮다는 점에서, 결과 해석에는 주의가 필요하다. 그림 12.11의 산점도에서 x축을 보면, 측정소의 인구 밀도 값이 인구 밀도 지도에 나타난 값의 범위보다 훨씬 좁다는 사실을 알 수 있다. 따라서 오른쪽 지도는 그림 12.11의 관계를 강하게 반영하여 인터폴레이션한 결과라 할 수 있다.

## 연습문제

1.  그림 12.13과 동일한 플롯을 생성하되, 왼쪽 패널에 그림 12.2의 역거리 가중 인터폴레이션 지도를 추가하시오.

2.  역거리 가중 인터폴레이션 결과와 크리깅 결과 간 산점도를 작성하고, 역거리 가중 인터폴레이션 결과와 잔차 크리깅 결과 간 산점도를 작성하시오.

3.  그리드 셀을 중심으로 하는 블록 평균을 예측하기 위해 `krige()` 함수의 `block` 아규먼트를 사용하여 블록 크기 10km(그리드 셀 크기), 50km, 200km로 설정한 *블록 크리깅*을 수행하시오. 세 가지 블록 크기에 대한 추정치 결과 지도를 포인트 크리깅 결과 지도와 비교하고, 각 경우에 해당하는 크리깅 표준 오차 지도도 동일하게 비교하시오.

4.  위에서 얻은 잔차 크리깅 결과를 기반으로, 크리깅 오차가 정규분포를 따른다고 가정하여 95% 신뢰구간의 하한선과 상한선에 해당하는 지도를 산출하고, 이를 단일(공통) 범례를 사용하여 플로팅하시오.

5.  크리깅 오차가 정규분포를 따른다고 가정할 때, NO$_2$의 포인트 값이 15 ppm을 초과할 확률을 계산하여 이를 지도로 표현하시오.
