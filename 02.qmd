---
date-modified: last-modified
number-sections: true
format: 
  html: 
    toc: true
code-link: true
code-copy: true
execute: 
  warning: false
  error: false
  freeze: auto
editor: visual
---

# 좌표계 {#sec-coord}

"데이터는 단순한 숫자가 아니라 맥락을 가진 숫자이다.": "데이터 분석에서 맥락은 의미를 부여한다."(Cobb and Moore 1997)

포인트, 라인 , 폴리곤, 커버리지, 그리드와 같은 지오메트리를 이해하기 전에, 좌표계에 대해 우선적으로 검토하는 것이 유용하다. 이를 통해 좌표값이 정확히 무엇을 나타내는지에 대한 개념을 갖출 수 있다. 공간데이터에서 관측개체의 위치는 좌표값으로 주어지고, 좌표값은 좌표계에 의해 규정된다. 이를 위해 다양한 좌표계가 사용될 수 있으며, 가장 중요한 차이점은 2차원 혹은 3차원 공간 상의 좌표값이 직교하는 두 축에 의거해 결정되는지(데카르트 좌표계) 혹은 거리와 방향에 의거해 결정되는지(극 좌표계, 구체 혹은 타원체 좌표계)이다. 모든 관측치는 관측의 위치 뿐만 아니라 관측의 시간과도 결부되어 있기 때문에 시간좌표계 역시 간단히 언급될 것이다. 단위와 데이텀이 무엇인지를 배우기에 앞서 퀀티티(quantity)에 대해 간략히 검토하고자 한다.

## 퀀티티, 단위, 데이텀

VIM(International Vocabulary of Metrology, BIPM et al., 2012)는 콴티티에 대해 "현상, 물체 또는 물질의 속성으로, 이 속성은 숫자로 표현할 수 있는 크기와 준거를 가진다." 여기서 "준거는 측정 단위, 측정 절차, 기준 물질 또는 이러한 것들의 조합일 수 있다."라고 기술한다. 모든 데이터가 퀀티티로 구성되어 있는지에 대해 논의할 수 있지만, 적절한 데이터 처리를 위해서는 숫자(또는 기호)와 자체 뿐만 아니라 숫자가 무엇을 의미하는지, 특히 숫자가 어떤 준거에 기반하고 있는지에 대한 정보가 함께 제공되어야 한다는 점에 대해서는 논의할 필요가 없다.

측정 시스템은 기본 퀀티티에 대한 기본 단위와 파생 퀀티티에 대한 파생 단위로 구성된다. 예를 들어, SI 단위계(Bureau International des Poids et Mesures 2006)는 일곱개의 기본 단위로 구성된다: 길이(미터, m), 질량(킬로그램, kg), 시간(초, s), 전류(암페어, A), 열역학적 온도(켈빈, K), 물질의 양(몰, mol), 그리고 광도(칸델라, cd). 파생 단위는 기본 단위의 정수 거듭제곱의 곱으로 구성되며, 예를 들어 속도($\text{m s}^{-1}$)나 밀도($\text{kg s}^{-1}$), 면적( $\text{m}^{2}$) 등이 있다. 특별한 경우에는 무단위 측정이 있을 수 있는데, 단위가 서로 소거되는 경우(예: 질량 분율: kg/kg 또는 라디안으로 측정된 각: m/m)나 물체나 사건의 빈도를 세는 경우(예: "5개의 사과")이다. 각도와 사과의 개수를 더하는 것은 의미가 없지만, 5개의 사과와 3개의 오렌지를 더하는 것은 의미가 있을 수 있으며, 이 경우 결과를 상위 클래스(즉, *과일*의 개수)로 재해석할 수 있다. Hand(2004)는 측정 단위의 맥락에서 다양한 측정 스케일에 대해 논의한 바 있는데, 예를 들어 사회과학에서 지능과 같은 변수를 측정하는데 사용되는 측정 스케일과 같은 것이다.

많은 퀀티티의 경우 값의 자연적인 원점은 0이다. 이러한 자연적 원점의 개념은 양(amount)이라는 퀀티티에 잘 들어맞는다. 두 양의 차는 의미 있는 음의 값일 수 있다. 위치와 시간의 차도 이러한 자연적 원점 개념으로 해석될 수 있다. 즉, 위치의 차는 거리이고, 시간의 차는 지속기간이다. 절대적인 위치와 시간은 고정된 원점이 필요하며, 이를 기준으로 다른 절대적인 시공간적 지점을 의미 있게 측정할 수 있다. 이러한 기준을 우리는 데이텀이라고 부른다. 공간의 경우, 데이텀은 하나 이상의 차원을 포함한다. 데이텀과 측정 단위(스케일)의 조합이 하나의 참조계를 구성한다.

이제 공간적 위치를 타원체 좌표 또는 데카르트 좌표로 표현하는 방법에 대해 자세하게 설명하고자 한다. 다음 섹션에서는 시간 및 공간 참조계과 R에서 이러한 참조계를 처리하는 방법에 대해 다룰 것이다.

## 타원좌표계

```{r}
#| echo: false
#| label: fig-2-1
#| fig-cap: "2차원 극 좌표계와 데카르트 좌표계"

par(mar = rep(0,4))
plot(3, 4, xlim = c(-6,6), ylim = c(-6,6), asp = 1)
axis(1, pos = 0, at = 0:6)
axis(2, pos = 0, at = -6:6)
xd <- seq(-5, 5, by = .1)
lines(xd, sqrt(25 - xd^2), col = 'grey')
lines(xd, -sqrt(25 - xd^2), col = 'grey')
arrows(0, 0, 3, 4, col = 'red', length = .15, angle = 20)
text(1.5, 2.7, label = "r", col = 'red')
xd <- seq(3/5, 1, by = .1)
lines(xd, sqrt(1 - xd^2), col = 'red')
text(1.2, 0.5, label = parse(text = "phi"), col = 'red')
lines(c(3,3), c(0,4), lty = 2, col = 'blue')
lines(c(0,3), c(4,4), lty = 2, col = 'blue')
text(3.3, 0.3, label = "x", col = 'blue')
text(0.3, 4.3, label = "y", col = 'blue')

```

그림 2.1은 2차원 극 좌표계와 데카르트 좌표계를 보여주고 있다. 해당 지점의 데카르트 좌표는 $(x,y)=(3,4)$으로 주어지고, 극 좌표는 $(r,\phi)=(5,\text{arctan(4/3)})$으로 주어지는데 $\text{arctan(4/3)}$는 대략 $0.93$ 라디안 혹은 $53^\circ$이다. 여기서 $x$, $y$, $r$은 모두 길이 단위이고 $\phi$는 각도 단위(무단위 길이/길이 비)라는 점에 유의할 필요가 있다. 데카르트 좌표와 극 좌표 간의 변환은 매우 간단하다.

$$
x=r\cos\phi,\quad y=r\sin\phi, \text{and}
$$

$$
r=\sqrt{x^2+y^2}, \quad \phi=\text{atan2}(y,x)
$$

여기서 $\text{atan2}$이 $\text{atan}(y/x)$대신 사용되었는데, 오른쪽 일사분면에 위치가 있기 때문이다.

### 구체 혹은 타원체 좌표계

3차원의 경우, 데카르트 좌표계는 $(x,y,z)$로 주어지고, 극 좌표계는 $(r,\lambda,\phi)$로 주어진다.

-   $r$은 구체의 반지름이다.

-   $\lambda$는 경도로, $(x,y)$ 평면에서 양의 $x$축으로부터 반시계방향으로 측정된다.

-   $\phi$는 위도로, $(x,y)$ 평면과 해당 벡터가 이루는 각도이다.

그림 2.2는 데카르트 지심 좌표계와 타원체 좌표계를 보여준다.

```{r}
#| echo: false
#| label: fig-2-2
#| fig-cap: "세 개의 거리로 표현되는 데카르트 지심 좌표계(왼편)와 두 개의 각도와 하나의 타원체고로 표현되는 타원체 좌표계(오른편)"
library(sf) |> suppressPackageStartupMessages()
e <- cbind(-90:90,0) # equator
f1 <- rbind(cbind(0, -90:90)) # 0/antimerid.
f2 <- rbind(cbind(90, -90:90), cbind(270, 90:-90))# +/- 90
eq <- st_sfc(st_linestring(e), st_linestring(f1), st_linestring(f2), crs='OGC:CRS84')

geoc <- st_transform(eq, "+proj=geocent")
cc <- rbind(geoc[[1]], NA, geoc[[2]], NA, geoc[[3]])
from3d <- function(x, offset, maxz, minz) {
    x = x[,c(2,3,1)] + offset # move to y right, x up, z backw
    x[,2] = x[,2] - maxz      # shift y to left
    d = maxz
    z = x[,3] - minz + offset
    x[,1] = x[,1] * (d/z)
    x[,2] = x[,2] * (d/z)
    x[,1:2]
}
maxz <- max(cc[,3], na.rm = TRUE)
minz <- min(cc[,3], na.rm = TRUE)
offset <- 3e7
circ <- from3d(cc, offset, maxz, minz)
mx <- max(cc, na.rm = TRUE) * 1.1
x <- rbind(c(0, 0, 0), c(mx, 0, 0))
y <- rbind(c(0, 0, 0), c(0, mx, 0))
z <- rbind(c(0, 0, 0), c(0, 0, mx))
ll <- rbind(x, NA, y, NA, z)
l0 <-  from3d(ll, offset, maxz, minz)
mx <- max(cc, na.rm = TRUE) * 1.2
x <- rbind(c(0, 0, 0), c(mx, 0, 0))
y <- rbind(c(0, 0, 0), c(0, mx, 0))
z <- rbind(c(0, 0, 0), c(0, 0, mx))
ll <- rbind(x, NA, y, NA, z)
l <-  from3d(ll, offset, maxz, minz)

par(mfrow = c(1, 2))
par(mar = rep(0,4))
plot.new()
plot.window(xlim = c(min(circ[,1],na.rm = TRUE), 3607103*1.02), 
                        ylim = c(min(circ[,2],na.rm = TRUE), 2873898*1.1), asp = 1)
lines(circ)
lines(l0)
text(l[c(2,5,8),], labels = c("x", "y", "z"), col = 'red')
# add POINT(60 47)
p <- st_as_sfc("POINT(60 47)", crs = 'OGC:CRS84') |> st_transform("+proj=geocent")
p <- p[[1]]
pts <- rbind(c(0,0,0), c(p[1],0,0), c(p[1],p[2],0), c(p[1],p[2],p[2]))
ptsl <- from3d(pts, offset, maxz, minz)
lines(ptsl, col = 'blue', lty = 2, lwd = 2)
points(ptsl[4,1], ptsl[4,2], col = 'blue', cex = 1, pch = 16)

plot.new()
plot.window(xlim = c(min(circ[,1],na.rm = TRUE), 3607103*1.02), 
                        ylim = c(min(circ[,2],na.rm = TRUE), 2873898*1.1), asp = 1)
lines(circ)

p <- st_as_sfc("POINT(60 47)", crs = 'OGC:CRS84') |> st_transform("+proj=geocent")
p <- p[[1]]
pts <- rbind(c(0,0,0), c(p[1],p[2],p[3]))
pt <-  from3d(pts, offset, maxz, minz)
lines(pt)
points(pt[2,1], pt[2,2], col = 'blue', cex = 1, pch = 16)

p0 <- st_as_sfc("POINT(60 0)", crs = 'OGC:CRS84') |> st_transform("+proj=geocent")
p0 <- p0[[1]]
pts <- rbind(c(0,0,0), c(p0[1],p0[2],p0[3]))
pt <-  from3d(pts, offset, maxz, minz)
lines(pt)

p0 <- st_as_sfc("POINT(0 0)", crs = 'OGC:CRS84') |> st_transform("+proj=geocent")
p0 <- p0[[1]]
pts <- rbind(c(0,0,0), c(p0[1],p0[2],p0[3]))
pt <-  from3d(pts, offset, maxz, minz)
lines(pt)

p0 <- st_as_sfc("POINT(0 90)", crs = 'OGC:CRS84') |> st_transform("+proj=geocent")
p0 <- p0[[1]]
pts <- rbind(c(0,0,0), c(p0[1],p0[2],p0[3]))
pt <-  from3d(pts, offset, maxz, minz)
lines(pt, lty = 2)

p0 <- st_as_sfc("POINT(90 0)", crs = 'OGC:CRS84') |> st_transform("+proj=geocent")
p0 <- p0[[1]]
pts <- rbind(c(0,0,0), c(p0[1],p0[2],p0[3]))
pt <-  from3d(pts, offset, maxz, minz)
lines(pt, lty = 2)

f1 <- rbind(cbind(0:60, 0))
arc <- st_sfc(st_linestring(f1), crs='OGC:CRS84')
geoc <- st_transform(arc, "+proj=geocent")
cc <- rbind(geoc[[1]])
circ <- from3d(cc, offset, maxz, minz)
lines(circ, col = 'red', lwd = 2, lty = 2)

f1 <- rbind(cbind(60, 0:47))
arc <- st_sfc(st_linestring(f1), crs='OGC:CRS84')
geoc <- st_transform(arc, "+proj=geocent")
cc <- rbind(geoc[[1]])
circ <- from3d(cc, offset, maxz, minz)
lines(circ, col = 'blue', lwd = 2, lty = 2)

text(pt[1,1]+100000, pt[1,2]+50000, labels = expression(phi), col = 'blue') # lat
text(pt[1,1]+20000, pt[1,2]-50000, labels = expression(lambda), col = 'red') # lng


```

$\lambda$는 $-180^\circ$에서 $180^\circ$ 사이의 값(혹은 $0^\circ$에서 $360^\circ$ 사이의 값)을 갖고, $\phi$는 $-90^\circ$에서 $90^\circ$ 사이의 값을 갖는다. 타원체가 아니라 고정된 반지름 갖는 구체 *상*의 위치만을 상정할 경우 위의 $r$을 생략한 $(\lambda,\phi)$ 만으로도 모든 위치를 규정하기에 충분하다.

이것은 단지 *하나의* 정의일 뿐이며, 예를 들어 위도 대신 해당 벡터와 $z$ 축 사이의 각도인 극각을 측정할 수도 있다는 점에 유의해야 한다. 좌표값을 $(\phi,\lambda)$의 형태로 나타내는 오랜 전통이 있지만 이 책에서는 경도-위도 형식($\lambda,\phi$)을 사용할 것이다. 그림 2.2에 표시된 지점은 각도값으로 구성된 $(\lambda,\phi)$ 혹은 타원체 좌표값을 가지며 도 단위로 주어진다.

```{r}
#| echo: false
#| message: true
library(sf)
p <- st_as_sfc("POINT(60 47)", crs = 'OGC:CRS84')
p[[1]]
```

지심좌표값은 미터 단위로 주어진다.

```{r}
#| echo: false
#| message: true
p <- st_as_sfc("POINT(60 47)", crs = 'OGC:CRS84') |> st_transform("+proj=geocent")
p[[1]]
```

타원체 상의 지점에 대해서는 각도를 나타내는 두 가지 방법이 있다(그림 2.3). 하나는 타원체의 중심을 기준으로 측정된 각도($\psi$), 또는 해당 지점을 지나는 접선에 수직으로 측정된 각도($\phi$)이다.

```{r}
#| echo: false
#| label: fig-2-3
#| fig-cap: "타원체 상의 각도: 측지 위도(푸른색)와 지심 위도(붉은색)"

par(mar = rep(0,4))
x <- 4
y <- 5/8 * sqrt(48)
plot(x, y, xlim = c(-6,6), ylim = c(-8,8), asp = 1)
axis(1, pos = 0, at = 0:9)
axis(2, pos = 0, at = -5:5)
xd <- seq(-8, 8, by = .1)
lines(xd, 5/8 * sqrt(64 - xd^2), col = 'grey')
lines(xd, 5/8 * -sqrt(64 - xd^2), col = 'grey')
arrows(0, 0, x, y, col = 'red', length = .15, angle = 20)
b <- (x * 25) / (-y * 64)
a <- y - x * b
abline(a, b, col = 'grey')
b <- -1/b
x0 <- x - y / b
arrows(x0, 0, x, y, col = 'blue', length = .15, angle = 20)
text(1.2, 0.5, label = parse(text = "psi"), col = 'red')
text(3, 0.5, label = parse(text = "phi"), col = 'blue')

```

### 투영좌표계, 거리

종이 지도와 컴퓨터 화면이 지구본보다 훨씬 더 실용적이고 널리 사용되기 때문에, 우리는 공간데이터를 보통 2차원 평면 상에 투영된 형태로 보게 된다. 이차원 공간에서 위치를 계산한다는 것은 우리가 투영 좌표를 사용한다는 것을 의미한다. 타원체 좌표를 투영한다는 것은 형태, 방향, 면적 또는 이 세 가지 모두가 왜곡된다는 것을 의미한다(Iliffe and Lott 2008).

데카르트 좌표계에서 두 지점 $p_i$와 $p_j$ 간의 거리는 유클리드 거리로 계산되며, 2차원의 경우 $p_i=(x_i,y_i)$이므로 다음의 수식으로 주어진다.

$$
d_{ij}=\sqrt{(x_i-x_j)^2+(y_i-y_j)^2}
$$

3차원의 경우는 $p_i=(x_i,y_i,z_i)$이므로, 다음의 수식으로 주어진다.

$$
d_{ij}=\sqrt{(x_i-x_j)^2+(y_i-y_j)^2+(z_i-z_j)^2}
$$

이 거리는 지점 $i$와 지점 $j$ 사이의 직선 거리의 길이를 의미한다.

원 상의 두 지점의 경우, 두 지점 $c_i=(r,\phi_1)$와 $c_j=(r,\phi_2)$ 사이의 호의 길이는 다음과 같이 주어진다. $$
s_{ij}=r|\phi_1-\phi_2|=r\theta
$$ 여기서 $\theta$는 $\phi_1$과 $\phi_2$ 사이의 각도를 라디안으로 나타낸 것이다. $\theta$의 값이 매우 작다면 호가 직선에 가깝기 때문에 $s_{ij}\approx d_{ij}$가 성립한다.

반지름이 $r'$인 구체 상의 두 지점 $p_1=(\lambda_1,\phi_1)$과 $p_2=(\lambda_2,\phi_2)$의 경우, 두 지점 $p_1$과 $p_2$를 통과하는 원(이 원의 중심은 구체의 중심과 일치) 상에서의 두 지점 사이의 호의 길이를 *대권거리*(great circle distance)라고 하며, $s_{12}=r\theta_{12}$로 주어진다. 따라서 $p_1$과 $p_2$ 사이의 각도(라디안)는 다음과 같이 주어진다.

$$
\theta_{12}=\arccos(\sin\phi_1\cdot \sin\phi_2+\cos\phi_1\cdot \cos\phi_2\cdot\cos(|\lambda_1-\lambda_2|))
$$

타원체 상의 두 지점 간의 호의 길이를 계산하는 것은 훨씬 더 복잡하다. Karney (2013)은 이와 관련하여 심도 있는 논의를 제공하였으며, PROJ 라이브러리의 일부인 GeographicLib에서 구현된 방법에 대한 자세한 설명을 제시한다.

이 거리 측정 방식들이 실제로 서로 다른 값을 산출함을 보여주기 위해, 우리는 베를린과 파리 간의 거리를 계산했다. WGS84 타원체와 완전 구체에 각각에 대해 거리를 계산했는데, gc_는 대권거리를, str_은 지심좌표값을 이용한 직선거리를 나타낸다.

```{r}
#| echo: false

pts <- st_sfc(st_point(c(13.4050, 52.5200)), st_point(c(2.3522, 48.8566)), crs = 'OGC:CRS84')
s2_orig <- sf_use_s2(FALSE)
d1 <- c(gc_ellipse = st_distance(pts)[1,2])
sf_use_s2(TRUE)
# or, without using s2, use st_distance(st_transform(pts, "+proj=cart +ellps=sphere"))
d2 <- c(gc_sphere = st_distance(pts)[1,2])
p <- st_transform(pts, "+proj=cart +ellps=WGS84")
d3 <- c(str_ellipse = units::set_units(sqrt(sum(apply(do.call(cbind, p), 1, diff)^2)), m))
p2 <- st_transform(pts, "+proj=cart +ellps=sphere")
d4 <- c(str_sphere = units::set_units(sqrt(sum(apply(do.call(cbind, p2), 1, diff)^2)), m))
res <- c(d1, d3, d2, d4) # note order
# print as km, re-add names:
sf_use_s2(s2_orig) # back to what it was before changing
res |> units::set_units(km) |> setNames(names(res)) |> print(digits = 5)

```

### 한정 공간과 비한정 공간

2차원 및 3차원 유클리드 공간($R^2$와 $R^3$)는 비한정 공간이다. 이 공간의 모든 선은 무한한 길이를 가지며, 면적이나 부피는 자연적인 상한이 없다. 이와는 대조적으로 구($S^1$) 혹은 구체($S^2$)의 공간은 한정 공간이다. 무한히 많은 점이 있을 수는 있지만, 원의 길이와 면적, 구의 반지름, 면적 및 부피는 유한하다.

이것은 사소하게 들릴 수 있지만, 공간데이터를 처리할 때 흥미로운 도전 과제로 이어진다. $R^2$ 상의 폴리곤은 명확하게 내부와 외부를 가진다. $S^2$ 공간인 구체 상에서 모든 폴리곤은 구체를 두 부분으로 나누며, 이 두 부분 중 어느 쪽을 내부로 간주하고 어느 쪽을 외부로 간주할지는 애매하며, 이는 통과 방향(traversal direction)에 의해 정의되어야 한다(역자주: 통과 방향은 보통 시계 방향과 반시계 방향으로 나누는데, 예를 들어, 삼각형의 변을 시계 방향으로 통과하면 왼쪽에 있는 영역이 내부로 간주되고, 반시계 방향으로 통과하면 오른쪽에 있는 영역이 내부로 간주된다.). 4장에서 $S^2$ 지오메트리를 다룰 때의 결과에 대해 추가로 논의할 것이다.

## CRS

Lott(2015)를 따라 다음과 같은 개념 정의를 사용할 것이다(이탤릭체는 Lott의 정의를 그대로 옮겨 쓴 것이다)

-   **좌표계**는 *지점에 좌표를 할당하는 방법을 지정하는 수학적 규칙의 집합*이다.

-   **데이텀**은 *좌표계의 원점, 축척, 방향을 정의하는 파라미터 또는 파라미터의 집합*이다.

-   **측지데이텀**은 *2차원 또는 3차원 좌표계와 지구와의 관계를 설명하는 데이텀*이다(역자주: 다시 말해, 지구에 부여된 2차원 또는 3차원 좌표계를 설명하는 데이텀이다).

-   **CRS**(좌표참조계)는 특정한 데이텀에 의거해 특정한 객체에 부여된 좌표계이다. 측지데이텀과 수직데이텀의 경우, 객체는 지구이다(역자주: 측지데이텀은 지구 상의 위치를 규정하는 수평데이텀이고 수직데이텀은 말그대로 지표 상의 높이를 규정하는 데이텀이다).

이 개념을 더 자세히 설명하는 읽기 쉬운 텍스트는 Iliffe and Lott(2008)이다.

지구는 규칙적인 형태를 따르지 않는다. 지표 기복이 매우 불규칙적인 형상을 띤다는 것을 잘 알려져 있지만, 평균해수면과 관련하여 일정한 중력에 의해 형성된 표면인 지오이드(geoid) 또한 불규칙적이다. 지오이드에 대한 모델 중 가장 일반적으로 사용되는 것은 회전타원체로, 이는 두 개의 동일한 반단축을 가진 타원이다. 이런 회전타원체를 지구와 어떠한 방식으로 일치시킬 것인가가 데이텀을 규정한다. 그런데 타원체를 지구의 어떤 부분에 일치시킬지, 혹은 어떤 준거 지점을 사용하여 일치시킬지에 따라 타원체의 적합도는 다양할 수 있고, 이런 연유로 인해 다양한 데이텀이 존재할 수 있는 것이다. 어떤 데이텀은 특정한 지각판에 대한 적합도에 집중하며(ETRS89), 어떤 데이텀은 전세계의 평균적인 적합도를 지향한다(WGS84). 국지적인 적합도에 치중할수록 해당 지역에서의 근사 오류는 낮아지게 된다.

위에서 제시된 정의를 살펴보면, 경도와 위도로 주어진 좌표값은 해당 데이텀이 주어질 경우에만 지구 좌표계로서의 의미를 부여받을 수 있고, 해석이 모호성이 사라질 수 있음을 함축하고 있다.

특정한 투영법이 적용된 데이터는 반드시 특정한 참조타원체(데이텀)와 결부되어 있음을 주의해야 한다. 데이텀 전환 없이 투영법만 바꾸는 것을 좌표전환(coordinate conversion)이라고 하는데, 이 좌표변환은 해당 데이텀과 결부되어 있는 특정 타원체의 좌표값에 의거해 이루어진다. 이 좌표변환의 과정은 정보의 비손실적이며 가역적이다. 변환을 위한 파라미터와 함수식은 불변이다.

새로운 데이텀에 의거해 좌표를 재계산하는 것을 좌표변환(coordinate transformation)이라고 한다. 좌표전환과 달리 좌표변환은 근사적으로 이루어진다. 왜냐하면 데이텀이 모델 적합의 결과이기 때문에 데이텀 간 변환 또한 적합된 모델이기 때문이다. 변환 함수도 경험적으로 얻어지는 것이며, 적합도와 정확성에 대한 설정을 달리하는 다양한 변환 경로가 가능할 수 있다.

판구조론은 글로벌 데이텀을 위한 고정된 객체의 위치가 시간이 흐름에 따라 변할 수 있음을 우리들에게 알려준다. 이는 데이텀 간 좌표변환이 시간 의존적일 수 있음을 시사하는 것이다. 지진으로 인해 특정 지역의 좌표가 갑작스럽게 변화할 수 있다. 국지 데이텀을 특정한 지각판에 고정시킬 수도 있지만(ETRS89), 보다 역동적으로 변화시킬 수도 있다.

## PROJ와 지도 정확도

현재 오픈소스 지리공간 소프트웨어에서 활동하는 사람들 중 PROJ 이전의 시간을 기억하는 사람은 거의 없다. PROJ(Evenden 1990)는 1970년대에 포트란 프로젝트로 시작되어 1985년에 지도투영을 위한 C 라이브러리로 출시되었다. 이 라이브러리는 직접 투영 및 역 투영을 위한 명령줄 인터페이스를 제공하였으며, 소프트웨어와 연결하여 투영과 재투영을 곧바로 실행하는 것이 가능했다. 데이텀은 그냥 주어지는 것으로 간주되었으며 데이텀 변환은 허용되지 않았다.

2000년대 초 PROJ는 PROJ.4가 되었는데, 불변의 버전 번호가 붙은 것이다. GPS의 대두 등 여러 요인으로 인해 데이터 변환에 대한 필요성이 증가하였고, PROJ.4는 기본적인 데이텀 지원 기능을 장착하게 되었다. PROJ는 CRS를 다음과 같은 형식으로 정의한다.

`+proj=utm +zone=33 +datum=WGS84 +units=m +no_defs`

"키=값"쌍은 + 기호로 시작하고 공백으로 구분된다. 이 형식은 PROJ 프로젝트가 수십 년 동안 4.x 버전으로 유지되었기 때문에 'PROJ.4 문자열'로 알려지게 되었다. 다른 예를 들면 다음과 같다.

`+ellps=bessel +towgs84=565.4,50.3,465.6,-0.399,0.344,-1.877,4.072`

이 문자열은 해당 데이텀이 다른 타원체(Bessel)를 사용하며, 이 타원체를 WGS84(GPS때문에 널리 알려짐)로 변환하기 위해서는 7개(또는 3개)의 파라미터가 필요하다는 점을 잘 나타낸다.

PROJ.4 외에 널리 사용되고 있는 투영법에 대한 데이터베이스가 구축되었는데, 그것들 중 가장 널리 알려진 것인 EPSG(European Petroleum Survey Group) 레지스트리이다. 국가지도제작기관은 자국의 CRS에 대한 `+towgs84` 파라미터(WGS84로 변환하기 위한 파라미터)에 대한 최선의 추정치를 계산 및 업데이트하여, EPSG 등록부를 통해 배포하였다. 일부 변환의 경우, 데이텀 그리드가 제공되었는데 PROJ.4의 일부로 배포되었다. 이러한 그리드는 결국 래스터 지도를 의미하는데, 데이텀 변환이 야기하는 경도, 위도, 또는 고도의 변화값을 모든 지점에 대해 미리 계산해 둔 것이다.

PROJ.4에서는 모든 좌표변환이 WGS84로의 변환을 거쳐야 했다. 전혀 다른 데이텀을 가진 데이터를 재투영할 때도 WGS84로의 변환을 거쳐야 했다. 최대 100m의 오류는 비교적 큰 지역의 지도 제작 목적으로는 허용 가능했지만, 일부 응용 프로그램은 더 높은 정확도의 변환이 필요하다. 예를 들어, 정밀 농업, UAV(역자주: Unmanned Aerial Vehicle의 약자로 무인항공기로 번역될 수 있지만, 보통 드론을 지칭할 때 사용된다.) 비행 계획 또는 객체 추적이 있다.

2018년, 성공적인 'GDAL 좌표계 공동 개발' 이니셔티브 이후, 오픈소스 지리공간 소프트웨어 스택에서 이익을 얻는 여러 회사들이 PROJ에서 보다 현대적이고 진보된 좌표변환 시스템 개발을 지원했다. 몇 년 동안 PROJ.4는 5, 6, 7, 8, 9 버전을 거치며 발전하였고, 따라서 PROJ(또는 PR$\phi$J)로 이름이 변경되었다.

가장 주목할만한 변화에 다음의 것들이 있다.

-   비록 PROJ.4 문자열이 새로운 CRS를 정의하는데 여전히 사용될 수 있지만, 모든 CRS를 포괄하기에 충분하지 않다는 점이 드러났다. 새로운 형식인 WKT-2(다음 섹션에서 설명됨)가 이를 대체한다.

-   허브 데이텀으로서의 WGS84의 지위를 박탈한다. 좌표변환이 더 이상 특정 데이텀을 거칠 필요가 없다.

-   CRS A에서 CRS B로 가는 여러 변환 또는 전환 경로(소위 파이프라인)가 가능하며, 정확도 정보만 제시된다면 등재될 수 있다. PROJ는 디폴트로 가장 정확한 경로를 사용하지만 사용자가 제어할 수 있다.

-   변환 파이프라인은 축 교환 및 단위 변환을 포함하여 다수의 기본 변환 작업을 연결할 수 있다.

-   데이텀 그리드는 라이브러리와 함께 배포되지 않고 CDN(content delivery network)에서 접근할 수 있다. PROJ는 이러한 그리드에 대한 네트워크 접근을 활성화하거나 비활성화할 수 있도록 하며, 실제로 필요한 그리드 섹션만 다운로드하여 사용자의 기기에 캐시로 저장하여 향후 사용할 수 있게 한다.

-   에포케(epoche) 좌표변환, 즉 시간-의존적 좌표변환이 가능하다. 따라서 소스 및 타깃 시간을 포함하는 4차원 자표계에 대한 변환이 가능하다(역자주: 지구의 좌표계가 시간이 지남에 따라 변화해 왔으므로 특정 시대(에포케)에 의거한 변환임으로 하나의 정보로 포함시킬 수 있게 되었다는 점을 의미한다.).

-   기등록 CRS를 가진 데이터셋의 경우는 SQLite 데이터베이스에서 관리된다.

-   축 순서(경도, 위도)를 다르게 정의하는 것이 가능하다.

많은 개선이 이루어졌으며, 변환의 정확도는 이제 1미터 이하일 수 있다. 흥미로운 점은 마지막 부분이다. 수십년 동안 타원체 좌표를 가진 공간데이터의 축 순서(경도, 위도)를 자명한 것으로 가정할 수 있었지만, 이제는 더 이상 그렇지 않다. 섹션 7.7.6에서 이를 처리하는 방법을 살펴볼 것이다.

```{r}
#| echo: false
#| label: fig-2-4
#| fig-cap: "영국의 OSGB 1936(EPSG:4277)를 ETRS89(EPSG:4258)로 변환하는데 사용되는 수평 데이텀 그리드"

library(stars)
library(rnaturalearth)
library(dplyr) |> suppressPackageStartupMessages()
countries110 |> 
    st_as_sf() |>
    filter(ADMIN == "United Kingdom") |>
    st_geometry() -> uk
filename = "data/uk_os_OSTN15_NTv2_OSGBtoETRS.tif"
r <- if (file.exists(filename)) {
    r <- read_stars(filename)
  } else {
    read_stars("/vsicurl/https://cdn.proj.org/uk_os_OSTN15_NTv2_OSGBtoETRS.tif")
  }
hook <- function() {
        plot(uk, border = "orange", col = NA, add = TRUE)
}
plot(r[,,,1:2], axes = TRUE, hook = hook, key.pos = 4)

```

```{r}
#| echo: false
#| label: fig-2-5
#| fig-cap: "영국의 ETRS89(EPSG:4937를 ODN 고도(EPSG:5701)로 변환하는데 사용되는 수직 데이텀 그리드"

filename = "data/uk_os_OSGM15_GB.tif"
h <- if (file.exists(filename)) {
    read_stars(filename)
  } else {
    read_stars("/vsicurl/https://cdn.proj.org/uk_os_OSGM15_GB.tif")
  } 
plot(h, axes = TRUE, reset = FALSE)
plot(uk, border = "orange", col = NA, add = TRUE)

```

그림 2.4에 나타나 있는 수평 데이텀 그리드와 그림 2.5에 나타나 있는 수직 데이텀 그리드의 예는 cdn.proj.org로부터 다운로드 받았다. 데이텀 그리드는 픽셀별 정화도 값을 포함할 수 있다.

## WKT-2

Lott (2015)는 CRS의 인코딩과 CRS 간의 변환을 WKT(well-known text) 통해 나타내는 표준을 제안하였다. 이 표준(및 포맷)을 비공식적으로 WKT-2라고 부른다. 앞에서 언급했듯이, GDAL과 PROJ는 이 표준을 지원한다. 예로서 특정 CRS(`EPSG:4326`)은 WKT-2로 다음과 같이 표시된다.

``` R
GEOGCRS["WGS 84",
    ENSEMBLE["World Geodetic System 1984 ensemble",
        MEMBER["World Geodetic System 1984 (Transit)"],
        MEMBER["World Geodetic System 1984 (G730)"],
        MEMBER["World Geodetic System 1984 (G873)"],
        MEMBER["World Geodetic System 1984 (G1150)"],
        MEMBER["World Geodetic System 1984 (G1674)"],
        MEMBER["World Geodetic System 1984 (G1762)"],
        MEMBER["World Geodetic System 1984 (G2139)"],
        ELLIPSOID["WGS 84",6378137,298.257223563,
            LENGTHUNIT["metre",1]],
        ENSEMBLEACCURACY[2.0]],
    PRIMEM["Greenwich",0,
        ANGLEUNIT["degree",0.0174532925199433]],
    CS[ellipsoidal,2],
        AXIS["geodetic latitude (Lat)",north,
            ORDER[1],
            ANGLEUNIT["degree",0.0174532925199433]],
        AXIS["geodetic longitude (Lon)",east,
            ORDER[2],
            ANGLEUNIT["degree",0.0174532925199433]],
    USAGE[
        SCOPE["Horizontal component of 3D system."],
        AREA["World."],
        BBOX[-90,-180,90,180]],
    ID["EPSG",4326]]
```

이 예시는 축 순서가 *위도*, *경도*로 설정된 좌표계를 보여주고 있다. 물론 실제로 사용되고 있는 대부분의 좌표계는 축 순서가 *경도*, *위도*이다. WGS84 타원체에 대한 *앙상블*(ENSEMBLE)은 다양한 업데이트를 나열하고 있다. 이 앙상블 중 *어떤* 것를 사용하는냐에 따라 수 미터의 오차가 발생할 수 있다. `OGS:CRS84`는 축 순서를 `경도`, `위도`의 순서를 명확히 하였기 때문에 GRS84에 대한 대안으로 권장된다. 그러나 데이텀 앙상믈 문제는 해결하지 못한다.

PROJ의 역사와 최근 변화에 대한 자세한 소개는 Knudsen and Evers(2017), Evers and Knudsen(2017)의 연구를 토대로 정리한 Bivand(2020)에 잘 나타나 있다.

## 연습문제

R을 활용하여 아래의 연습문제를 풀되 패키지의 사용은 금지이다. 적절한 함수를 찾도록 노력하라.

1.  자연적 원점 0을 갖지 않는 *지리적* 측도 세가지를 나열하라.

2.  다음의 $(x,y)$ 좌표, $(10,2)$, $(-10,-2)$, $(10,-2)$, $(0,10)$을 극 좌표로 전환하라.

3.  다음의 $(r,\phi)$ 좌표, $(10,45^\circ)$, $(0,100^\circ)$, $(5,359^\circ)$를 데카르트 좌표로 전환하라.

4.  지구를 반지름이 6371km인 완전한 구체라고 가정하고, 다음의 두 지점 간의 대권거리를 구하라. $(10,10)$과 $(11,10)$, $(10,80)$과 $(11,80)$, $(10,10)$과 $(10,11)$, $(10,80)$과 $(10,81)$(단위: 각도)의 대권거리는 몇 도인가?
